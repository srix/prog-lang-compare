{"Datatypes_Primitives": "In JavaScript - ECMAScript 2021, there are six primitive types: \n1. `undefined`\n2. `null`\n3. `boolean`\n4. `number`\n5. `string`\n6. `symbol`\n\nHere are some explanations and examples of each primitive type: \n\n1. `undefined`: It represents a variable that has been declared but not assigned a value. \n\n    ```\n    let a; \n    console.log(a); // Output: undefined \n    ```\n\n2. `null`: It represents an intentional absence of any object value.\n\n    ```\n    let a = null; \n    console.log(a); // Output: null \n    ```\n\n3. `boolean`: It represents a logical entity that can have two values: `true` or `false`. \n\n    ```\n    let isTrue = true;\n    let isFalse = false;\n    console.log(isTrue); // Output: true\n    console.log(isFalse); // Output: false\n    ```\n\n4. `number`: It represents numeric values. \n\n    ```\n    let num = 123; \n    console.log(num); // Output: 123\n    ```\n\n5. `string`: It represents a sequence of characters and allows for text manipulation. \n\n    ```\n    let str = \"Hello, World!\"; \n    console.log(str); // Output: Hello, World!\n    ```\n\n6. `symbol`: It represents a unique identifier that is immutable and can be used as an object property key. \n\n    ```\n    let symbolOne = Symbol(\"blue\");\n    let symbolTwo = Symbol(\"blue\");\n    console.log(symbolOne === symbolTwo); // Output: false\n    ```", "String_Create": "To create a string in JavaScript - ECMAScript 2021, you simply need to enclose your text within single or double quotes. Here's an example:\n\n```javascript\nlet myString = \"Hello, World!\";\n```\n\nIn the above example, the `myString` variable has been assigned the value of \"Hello, World!\" enclosed within double quotes.\n\nAnother example with single quotes:\n\n```javascript\nlet myString = 'This is a string';\n```\n\nYou can also use backticks (`) for creating strings called \"template literals\" that support multi-line strings and string interpolation. Here's an example:\n\n```javascript\nlet name = 'John';\nlet age = 25;\nlet myString = `My name is ${name} and I am ${age} years old`;\n```\n\nIn the above example, the `myString` variable is assigned a string that uses string interpolation to include the variables `name` and `age`. When we use backticks, we can freely add `new lines` without specifying an escape sequence.", "String_Concatenation": "In JavaScript - ECMAScript 2021, you can concatenate strings using the string concatenation operator `+` or the template literal syntax.\n\nHere are examples of string concatenation using both methods:\n\n1. Using the `+` operator:\n\n```\nlet firstName = \"John\";\nlet lastName = \"Doe\";\nlet fullName = firstName + \" \" + lastName;\n\nconsole.log(fullName); // Output: \"John Doe\"\n```\n\n2. Using template literals:\n\n```\nlet firstName = \"John\";\nlet lastName = \"Doe\";\nlet fullName = `${firstName} ${lastName}`;\n\nconsole.log(fullName); // Output: \"John Doe\"\n```\n\nIn the second example, the `${}` syntax is used to embed variables within the string. This method provides a cleaner and more readable way of concatenating strings.", "String_Interpolation": "In ECMAScript 2021 of JavaScript, interpolation of strings can be done using the template literals. Template literals are enclosed by back-tick (` `) instead of quotes, and placeholders can be defined by wrapping expressions with `${ }`. The expressions inside the placeholders get executed and interpolated with their results in the string.\n\nHere's an example:\n\n```\nconst name = \"John\";\nconst age = 25;\nconst address = \"123 Main St.\";\n\nconst message = `Hi, my name is ${name}. I am ${age} years old and I live at ${address}.`;\n\nconsole.log(message);\n```\n\nOutput:\n\n```\nHi, my name is John. I am 25 years old and I live at 123 Main St.\n```\n\nIn the above example, `${name}`, `${age}`, and `${address}` are placeholders that get evaluated and interpolated with the actual values of the variables. The resulting string is assigned to the `message` variable.\n\nWe can also use expressions inside the placeholders to perform various operations. Here's an example:\n\n```\nconst num1 = 10;\nconst num2 = 5;\n\nconst result = `${num1} - ${num2} = ${num1 - num2}`;\n\nconsole.log(result);\n```\n\nOutput:\n\n```\n10 - 5 = 5\n```\n\nIn the above example, we're performing arithmetic operations inside the placeholders. The resulting value of the expression gets interpolated with the string.\n\nWe can also nest template literals inside other template literals like this:\n\n```\nconst name = \"John\";\nconst age = 25;\nconst address = \"123 Main St.\";\n\nconst message = `Hi, my name is ${name}. I am ${age} years old and my address is: \n${`<p>${address}</p>`}`;\n\nconsole.log(message);\n```\n\nOutput:\n\n```\nHi, my name is John. I am 25 years old and my address is:\n<p>123 Main St.</p>\n```\n\nIn the above example, we're nesting a template literal inside another template literal to add HTML tags to the address.", "String_Remove_part": "In JavaScript - ECMAScript 2021, to remove a part of a string, we can use the `substring()` or the `slice()` methods. These methods return a new string with the specified portion removed.\n\nHere are some examples:\n\n1. Using `substring()`\n```\nlet str = \"Hello, World!\";\nlet newStr = str.substring(7); // Removes the first 7 characters\nconsole.log(newStr); // Output: World!\n\nnewStr = str.substring(0, 5); // Removes characters from index 0 to index 4\nconsole.log(newStr); // Output: Hello\n```\n\n2. Using `slice()`\n```\nlet str = \"Hello, World!\";\nlet newStr = str.slice(7); // Removes the first 7 characters\nconsole.log(newStr); // Output: World!\n\nnewStr = str.slice(0, 5); // Removes characters from index 0 to index 4\nconsole.log(newStr); // Output: Hello\n```\n\nBoth methods can also accept negative indices to remove characters from the end of the string.\n```\nlet str = \"Hello, World!\";\nlet newStr = str.substring(-6); // Starts from index 0 as negative indices are treated as 0\nconsole.log(newStr); // Output: Hello, World!\n\nnewStr = str.slice(-6); // Removes last 6 characters\nconsole.log(newStr); // Output: World!\n```", "String_Replace": "To replace a substring within a string in JavaScript - ECMAScript 2021, we use the `replace()` method that is available on a string. It takes two arguments:\n\n1. The first argument is the substring or a regular expression pattern that we want to replace.\n2. The second argument is the replacement string that should replace the existing substring.\n\nHere are some examples:\n\n1. Replacing a single occurrence of a substring:\n\n```\nlet str = \"The quick brown fox jumps over the lazy dog\";\nlet newStr = str.replace(\"brown\", \"red\");\nconsole.log(newStr); // The quick red fox jumps over the lazy dog\n```\n\nIn the above code, we replaced the first occurrence of \"brown\" with \"red\" in the original string.\n\n2. Replacing all occurrences of a substring using regular expression:\n\n```\nlet str = \"The quick brown fox jumps over the lazy brown dog\";\nlet newStr = str.replace(/brown/g, \"red\");\nconsole.log(newStr); // The quick red fox jumps over the lazy red dog\n```\n\nIn the above code, we used a regular expression with the `g` flag to replace all occurrences of \"brown\" with \"red\" in the original string.\n\n3. Replacing a substring with a callback function:\n\n```\nlet str = \"The quick brown fox jumps over the lazy dog\";\nlet newStr = str.replace(/brown|lazy/g, function(match) {\n  return match.toUpperCase();\n});\nconsole.log(newStr); // The quick BROWN fox jumps over the LAZY dog\n```\n\nIn the above code, we used a regular expression with the `g` flag to match all occurrences of \"brown\" and \"lazy\". We passed a callback function to the `replace()` method that takes a match as an argument and returns the replacement string in uppercase.\n\nThese are just a few examples of how to replace a substring within a string in JavaScript - ECMAScript 2021. The `replace()` method is a powerful string manipulation tool and can be used in many different ways depending on the requirements of your project.", "String_Split": "In JavaScript, you can split a string using the `split()` method which returns an array of substrings.\n\nThe syntax for using the `split()` method is as follows:\n\n```\nstring.split(separator, limit);\n```\n\nHere, `separator` is the character or regular expression that is used to divide the string into substrings. If the separator is an empty string or null, the string will be split into an array of characters. `limit` is an optional parameter that specifies the maximum number of splits to be made.\n\nSome examples of splitting a string in JavaScript are as follows:\n\n1. Splitting a string into an array of words:\n\n```\nconst sentence = \"The quick brown fox jumps over the lazy dog\";\nconst words = sentence.split(\" \");\nconsole.log(words);\n// Output: [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n```\n\n2. Splitting a string into an array of characters:\n\n```\nconst str = \"Hello World\";\nconst chars = str.split(\"\");\nconsole.log(chars);\n// Output: [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\"]\n```\n\n3. Splitting a string into an array of substrings based on a delimiter:\n\n```\nconst str = \"apple,orange,banana,mango\";\nconst fruits = str.split(\",\");\nconsole.log(fruits);\n// Output: [\"apple\", \"orange\", \"banana\", \"mango\"]\n```\n\n4. Splitting a string into an array of substrings and limiting the number of splits:\n\n```\nconst str = \"apple,orange,banana,mango\";\nconst fruits = str.split(\",\", 2);\nconsole.log(fruits);\n// Output: [\"apple\", \"orange\"]\n```", "String_Remove_leading_and_trailing_whitespace": "In JavaScript, we can use the `trim()` method to remove leading and trailing whitespaces from a string. This method is available in ECMAScript 5 and above. \n\nSyntax: `string.trim()`\n\nExample:\n\n```javascript\nlet str = \"   Hello, World!   \";\nlet trimmedStr = str.trim();\nconsole.log(trimmedStr); // Output: \"Hello, World!\"\n```\n\nIn the above example, the `trim()` method removes the leading and trailing whitespaces from the string `str`, and the resulting trimmed string is stored in the variable `trimmedStr`. The final output shows the trimmed string without any leading or trailing whitespaces.\n\nWe can also chain the `trim()` method with other string methods to perform various operations on a trimmed string. \n\nExample: \n\n```javascript\nlet str = \"   Hello, World!   \";\nlet reversedStr = str.trim().split(\"\").reverse().join(\"\");\nconsole.log(reversedStr); // Output: \"!dlroW ,olleH\"\n```\n\nIn this example, the `trim()` method is combined with the `split()`, `reverse()`, and `join()` methods to create a new string that is the reverse of the trimmed string. The final output shows the reversed string without any leading or trailing whitespaces.", "String_Compare": "In JavaScript - ECMAScript 2021, there are two ways to compare strings: \n\n1. Using the \"===\" operator, which performs a strict comparison of the values and data types. It returns \"true\" if both values are equal in type and value, and \"false\" otherwise. For example:\n\n```\nconst string1 = \"hello\";\nconst string2 = \"hello\";\n\nconsole.log(string1 === string2); // true\n\nconst string3 = \"hello\";\nconst string4 = \"HELLO\";\n\nconsole.log(string3 === string4); // false\n```\n2. Using the \"localeCompare()\" method, which compares two strings and returns a number based on their alphabetical order. If the first string is ordered before the second string, a negative number is returned. If the second string is ordered before the first string, a positive number is returned. If the two strings have the same alphabetical order, \"0\" is returned. For example:\n\n```\nconst string1 = \"apple\";\nconst string2 = \"banana\";\n\nconsole.log(string1.localeCompare(string2)); // -1\n\nconst string3 = \"orange\";\nconst string4 = \"grapefruit\";\n\nconsole.log(string3.localeCompare(string4)); // 1\n\nconst string5 = \"pear\";\nconst string6 = \"pear\";\n\nconsole.log(string5.localeCompare(string6)); // 0\n```\n\nRemember that when comparing strings, it is important to pay attention to the capitalization and to ensure that both strings have the same data type (i.e., both are either strings or numbers).", "String_Regex": "Regex (Regular Expressions) in JavaScript are used to match patterns in strings. The syntax for regex in JavaScript generally follows the syntax of other programming languages, but it can vary slightly. Here is an example of how to use regex in JavaScript:\n\nTo create a regular expression, you can use the `RegExp` constructor or a regex literal. A regex literal is enclosed in forward slashes `/regex/` and the `RegExp` constructor requires a string argument that specifies the regex pattern.\n\n```javascript\nconst regex1 = /cat/; // regex literal\nconst regex2 = new RegExp(\"dog\"); // RegExp constructor\n```\n\nOnce you have created a regex, you can use it with various methods (such as `test()` and `match()`) available on the `String` prototype to determine whether a string matches the regex pattern.\n\n```javascript\nconst str = \"The cat chased the dog\";\nconsole.log(regex1.test(str)); // true\nconsole.log(regex2.test(str)); // false\n```\n\nIn the above example, `test()` method returns `true` for `regex1` because the word \"cat\" is present in the string, but returns `false` for `regex2` because the word \"dog\" is not present in the string.\n\nYou can use various characters to build more complex regex patterns. Some of the most commonly used characters in JavaScript regex are:\n\n- `.` : Matches any character except newline\n- `^` : Matches the beginning of the string\n- `$` : Matches the end of the string\n- `*` : Matches zero or more occurrences of the preceding character\n- `+` : Matches one or more occurrences of the preceding character\n- `?` : Matches zero or one occurrence of the preceding character\n- `\\`: Used to escape special characters and treat them as literals\n\nFor example, the pattern `/c.t/` will match a string that has any character between \"c\" and \"t\", such as \"cat\", \"cot\", or \"cut\". And the pattern `/^The/` will match any string that starts with \"The\".\n\n```javascript\nconst regex3 = /c.t/;\nconsole.log(regex3.test(str)); // true\n\nconst regex4 = /^The/;\nconsole.log(regex4.test(str)); // true\n```\n\nIn addition, you can use parentheses to group parts of a regex, use square brackets to match any one of a set of characters, and the vertical bar `|` to specify alternatives. Here is an example:\n\n```javascript\nconst str2 = \"The bicycle is green\";\nconst regex5 = /(bike|bicycle)/;\nconsole.log(regex5.test(str2)); // true\n\nconst regex6 = /[aeiou]/;\nconsole.log(regex6.test(str2)); // true\n```\n\nIn the above example, the pattern `/(bike|bicycle)/` matches either \"bike\" or \"bicycle\". The pattern `/[aeiou]/` matches any vowel in the string. \n\nThese are just some examples of how to use regex in JavaScript. For more information and more complex patterns, you can refer to the documentation for regular expressions in JavaScript.", "Number_Increment": "To increment a number in JavaScript - ECMAScript 2021, you can use the unary `++` operator, which increases the value of the variable by 1. It can be used in both prefix and postfix forms.\n\nHere are a few examples:\n\n```\nlet num = 5;\nnum++; // postfix increment operator\nconsole.log(num); // Output: 6\n\nlet x = 10;\n++x; // prefix increment operator\nconsole.log(x); // Output: 11\n```\n\nIn the above example, the first use of `++` is postfix, so the value of `num` is incremented after it is returned and the output value is `6`. In the second example, the `++` operator is prefix, which means the value of `x` is incremented before the value is returned to the console and the output value is `11`.", "Number_Compare": "In JavaScript, you can compare numbers using comparison operators. Here are the comparison operators available in JavaScript:\n\n* `>` - greater than\n* `<` - less than\n* `>=` - greater than or equal to\n* `<=` - less than or equal to\n* `==` - equal to (checks value only)\n* `!=` - not equal to (checks value only)\n* `===` - equal to (checks both value and data type)\n* `!==` - not equal to (checks both value and data type)\n\nExample 1: Greater than comparison\n\n```javascript\nconst a = 5;\nconst b = 3;\n\nconsole.log(a > b); // Output: true\n```\n\nExample 2: Less than comparison\n\n```javascript\nconst x = 10;\nconst y = 20;\n\nconsole.log(x < y); // Output: true\n```\n\nExample 3: Greater than or equal to comparison\n\n```javascript\nconst m = 15;\nconst n = 20;\n\nconsole.log(m >= n); // Output: false\n```\n\nExample 4: Less than or equal to comparison\n\n```javascript\nconst p = 10;\nconst q = 10;\n\nconsole.log(p <= q); // Output: true\n```\n\nExample 5: Equal to comparison (checking value only)\n\n```javascript\nconst r = 10;\nconst s = \"10\";\n\nconsole.log(r == s); // Output: true\n```\n\nExample 6: Not equal to comparison (checking value only)\n\n```javascript\nconst t = 7;\nconst u = \"10\";\n\nconsole.log(t != u); // Output: true\n```\n\nExample 7: Equal to comparison (checking both value and data type)\n\n```javascript\nconst v = 10;\nconst w = \"10\";\n\nconsole.log(v === w); // Output: false\n```\n\nExample 8: Not equal to comparison (checking both value and data type)\n\n```javascript\nconst x = 10;\nconst y = \"10\";\n\nconsole.log(x !== y); // Output: true\n```\n\nThese are some of the ways to compare numbers in JavaScript using ECMAScript 2021.", "Number_Random": "Random numbers in JavaScript can be generated using the Math object's random() method, which returns a random number between 0 (inclusive) and 1 (exclusive). Here is an example:\n\n```js\nconst randomNumber = Math.random(); // generates a random number between 0 and 1\nconsole.log(randomNumber);\n```\n\nTo generate a random integer within a specified range, you can use the Math.floor() and Math.ceil() functions, like this:\n\n```js\nconst randomInteger = Math.floor(Math.random() * (max - min + 1)) + min;\nconsole.log(randomInteger);\n```\n\nIn the above example, the Math.random() method generates a random number between 0 and 1. We then multiply it by the difference between the max and the min values, add the min value and then apply the Math.floor() function. This generates a random integer that is within the specified range of min and max (inclusive).\n\nFor instance, suppose you want to generate a random number between 1 and 10 using the Math object. You can apply the following code snippet to achieve that:\n\n```js\nconst min = 1;\nconst max = 10;\nconst randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\nconsole.log(randomNumber);\n```\n\nThis code will generate a random integer between 1 and 10 (inclusive).", "Number_Float": "Float numbers in JavaScript are numerical values with decimal places, also known as floating-point numbers. Here's how to use them in ECMAScript 2021:\n\n1. Declare a float variable using the `let` keyword:\n\n```\nlet myFloat = 3.14;\n```\n\n2. You can also create a float variable using scientific notation:\n\n```\nlet myFloat = 3.14e2;   // 314\n```\n\n3. Use math operators like addition, subtraction, multiplication and division with float numbers:\n\n```\nlet num1 = 2.5;\nlet num2 = 1.2;\n\nlet sum = num1 + num2;      // 3.7\nlet difference = num1 - num2;   // 1.3\nlet product = num1 * num2;  // 3\nlet quotient = num1 / num2; // 2.083333333333333\n```\n\n4. You can also use `toFixed()` method to set the number of decimal places:\n\n```\nlet num = 2.56789;\nnum.toFixed(2);   // \"2.57\"\nnum.toFixed(4);   // \"2.5679\"\n```\n\n5. Comparing two floats can sometimes be problematic because of rounding errors. You can use `Math.abs()` function with a small value to compare the difference between two numbers:\n\n```\nlet a = 0.1 + 0.2;   // 0.30000000000000004\nlet b = 0.3;\n\nif (Math.abs(a - b) < 0.0001) {\n    console.log(\"a and b are approximately equal.\");\n} else {\n    console.log(\"a and b are not equal.\");\n}\n``` \n\nBy following these steps, you can effectively use float numbers in JavaScript - ECMAScript 2021.", "Type_Get_type_of_object": "To get the type of an object in JavaScript ECMAScript 2021, you can use the `typeof` operator. The `typeof` operator returns a string indicating the type of the operand. Here are some examples:\n\n1. Checking for a string:\n\n```\nlet str = 'Hello World';\nconsole.log(typeof str); // Output: string\n```\n\n2. Checking for a number:\n\n```\nlet num = 123;\nconsole.log(typeof num); // Output: number\n```\n\n3. Checking for a boolean:\n\n```\nlet bool = true;\nconsole.log(typeof bool); // Output: boolean\n```\n\n4. Checking for an object:\n\n```\nlet obj = {\n  name: 'John Doe',\n  age: 30\n};\nconsole.log(typeof obj); // Output: object\n```\n\n5. Checking for a function:\n\n```\nfunction greet(name) {\n  console.log('Hello, ' + name + '!');\n}\nconsole.log(typeof greet); // Output: function\n```\n\n6. Checking for an array:\n\n```\nlet arr = [1, 2, 3];\nconsole.log(typeof arr); // Output: object\nconsole.log(Array.isArray(arr)); // Output: true\n```\n\nNote: `Array.isArray` is a method to check if the given object is an array. It returns `true` if the object is an array, otherwise, it returns `false`.", "Type_Int_to_Float": "In JavaScript, you can convert an integer to a float by using the Number() function. The Number() function can take an integer or a string and return a float.\n\nHere is an example:\n\n```javascript\nlet myInteger = 5;\nlet myFloat = Number(myInteger);\n\nconsole.log(myFloat); // Output: 5\nconsole.log(typeof myFloat); // Output: \"number\"\n```\n\nIn this example, we first define a variable `myInteger` with a value of 5, which is an integer. We then use the Number() function to convert `myInteger` to a float and assign it to a new variable `myFloat`.\n\nTo verify that `myFloat` is a float, we use the `typeof` operator, which returns the type of the variable. In this case, we expect the type to be \"number\".\n\nHere is another example using a string:\n\n```javascript\nlet myString = \"10\";\nlet myFloat = Number(myString);\n\nconsole.log(myFloat); // Output: 10\nconsole.log(typeof myFloat); // Output: \"number\"\n```\n\nIn this example, we define a variable `myString` with a value of \"10\", which is a string. We then use the Number() function to convert `myString` to a float and assign it to a new variable `myFloat`.\n\nTo verify that `myFloat` is a float, we use the `typeof` operator again. The output should once again be \"number\".", "Type_Int_to_String": "Converting an integer to a string in JavaScript can be achieved by using the `toString()` method which is available on the Number object. This method returns a string representing the given number with the specified radix (base). \n\nHere's an example:\n\n```javascript\nconst num = 10;\nconst str = num.toString(); // convert num to a string\nconsole.log(typeof str); // output: string\nconsole.log(str); // output: \"10\"\n```\n\nIn the above example, we created a variable `num` with a value of 10, and then used the `toString()` method to convert it to a string. The resulting string was then stored in the variable `str`.\n\nHere's another example showing how to convert a number to a string with a specified radix:\n\n```javascript\nconst num = 255;\nconst strBinary = num.toString(2); // convert num to binary string\nconsole.log(strBinary); // output: \"11111111\"\n\nconst strHex = num.toString(16); // convert num to hexadecimal string\nconsole.log(strHex); // output: \"ff\"\n```\n\nIn the second example, we converted the number 255 to a binary string and a hexadecimal string using the `toString()` method with a specified radix. The `toString(2)` method returns the binary representation of the number, while `toString(16)` returns the hexadecimal representation.\n\nNote that it's important to remember that the `toString()` method does not modify the original number, it only returns a new string representing the number.", "Type_String_to_Int": "In JavaScript, we can convert a string to an integer by using the `parseInt()` method. This method takes a string as input and returns an integer.\n\nHere's an example of how to use `parseInt()`:\n\n```javascript\nconst myString = '42';\nconst myInt = parseInt(myString);\nconsole.log(typeof myInt); // Output: 'number'\nconsole.log(myInt); // Output: 42\n```\n\nIn this example, we first declare a string variable `myString` with the value of `'42'`. We then use `parseInt()` to convert `myString` to an integer and assign the result to the variable `myInt`.\n\nNote that `typeof myInt` will return `'number'`, indicating that the value of `myInt` is an integer.\n\nIf the string contains non-numeric characters, `parseInt()` will return `NaN` (Not a Number). For instance:\n\n```javascript\nconst myString = '42abc';\nconst myInt = parseInt(myString);\nconsole.log(typeof myInt); // Output: 'number'\nconsole.log(myInt); // Output: 42\n```\n\nIn this case, `parseInt()` ignores the `\"abc\"` part and returns `42`. Keep in mind that `parseInt()` only converts the first set of numeric characters in the string and ignores everything else.", "Type_String_": "In JavaScript - ECMAScript 2021, there are several ways to check if a string is a number. Here are a few examples:\n\nMethod 1: Using the Number() function\n\nThe Number() function in JavaScript converts a string to a number. If the string contains a valid number, the function returns the number, otherwise it returns NaN (Not a Number). We can use the isNaN() function to check if the result of Number() is NaN or not.\n\n```javascript\nlet str1 = \"123\";\nlet str2 = \"abc\";\n\nlet num1 = Number(str1);\nlet num2 = Number(str2);\n\nconsole.log(typeof num1); // number\nconsole.log(num1); // 123\n\nconsole.log(typeof num2); // number\nconsole.log(num2); // NaN\n\nconsole.log(isNaN(num1)); // false\nconsole.log(isNaN(num2)); // true\n```\n\nMethod 2: Using the typeof and parseFloat() functions\n\nThe typeof operator in JavaScript returns the data type of a variable. We can use it to check if a variable contains a number or not. The parseFloat() function in JavaScript is used to convert a string to a floating-point number. If the string contains a valid number, the function returns the number, otherwise it returns NaN. We can use the isNaN() function to check if the result of parseFloat() is NaN or not.\n\n```javascript\nlet str1 = \"123\";\nlet str2 = \"abc\";\n\nlet num1 = parseFloat(str1);\nlet num2 = parseFloat(str2);\n\nconsole.log(typeof num1); // number\nconsole.log(num1); // 123\n\nconsole.log(typeof num2); // number\nconsole.log(num2); // NaN\n\nconsole.log(isNaN(num1)); // false\nconsole.log(isNaN(num2)); // true\n```\n\nMethod 3: Using regular expressions\n\nWe can use regular expressions in JavaScript to check if a string is a number. The regular expression \\d+ matches one or more digits. The regular expression /^\\d+$/ matches a string that contains only digits. We can use the test() function of a regular expression to check if a string matches the regular expression or not.\n\n```javascript\nlet str1 = \"123\";\nlet str2 = \"abc\";\n\nlet regex = /^\\d+$/;\n\nconsole.log(regex.test(str1)); // true\nconsole.log(regex.test(str2)); // false\n```\n\nAll these methods can help you determine whether a string is a number, and you can choose the one that best fits your needs and coding style.", "Type_Null_True_False_": "In JavaScript, there are different ways to check whether a value is null, true or false. Here are some examples using the latest ECMAScript 2021 syntax:\n\n1. Using the triple equal operator (===): The triple equal operator is strict, which means it checks both the value and the data type. To check if a variable is null, true or false, you can use the following syntax:\n\n```\nlet variable = null; // or true/false\nif (variable === null) {\n  console.log(\"The variable is null.\");\n} else if (variable === true) {\n  console.log(\"The variable is true.\");\n} else if (variable === false) {\n  console.log(\"The variable is false.\");\n} else {\n  console.log(\"The variable is undefined or has a different data type.\");\n}\n```\n\n2. Using the double equal operator (==): The double equal operator is not strict, which means it checks only the value. However, it may result in unexpected behavior, especially when checking null values. It is recommended to use the triple equal operator instead. Here is an example:\n\n```\nlet variable = null; // or true/false\nif (variable == null) {\n  console.log(\"The variable is null or undefined.\");\n} else if (variable == true) {\n  console.log(\"The variable is true.\");\n} else if (variable == false) {\n  console.log(\"The variable is false.\");\n} else {\n  console.log(\"The variable has a different data type.\");\n}\n```\n\n3. Using the nullish coalescing operator (??): The nullish coalescing operator checks if a value is null or undefined. It returns the right-hand side value if the left-hand side is null or undefined. If the left-hand side is not null or undefined, it returns the left-hand side value. Here is an example:\n\n```\nlet variable = null; // or true/false\nconst result = variable ?? \"The variable is null or undefined.\";\nconsole.log(result);\n```\n\nThis will output \"The variable is null or undefined.\" if the variable is null, and the variable value if it is true or false.", "Array_Create_populated": "To create an array in JavaScript - ECMAScript 2021, you can use the square brackets notation. Here are some examples:\n\n1. Creating an empty array:\n\n```\nlet myArray = [];\n```\n\n2. Creating an array with initial elements:\n\n```\nlet myArray = [\"apple\", \"banana\", \"orange\"];\n```\n\n3. Creating an array with a specific size:\n\n```\nlet myArray = new Array(3);\n```\nThe above code will create an array with 3 empty slots and can be filled later\n\n```\nlet myFilledArray = new Array(3).fill(0);\n```\nThe above code will create an array with 3 elements filled with zeros.\n\n4. Creating an array with a mixture of data types:\n\n```\nlet myArray = [\"apple\", 42, true, {name: \"John\"}];\n```\n\nNote: Arrays in JavaScript are dynamic, which means that you can add and remove elements from an array at runtime.", "Array_Add": "To add an element to an array in JavaScript using ECMAScript 2021, you can use the `push()` method or the spread operator.\n\nHere's an example using the `push()` method:\n\n```javascript\nlet arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr); // [1, 2, 3, 4]\n```\n\nIn the above code, we declared an array `arr` containing three elements and then we used the `push()` method to add the element `4` at the end of the array.\n\nHere's an example using the spread operator:\n\n```javascript\nlet arr = [1, 2, 3];\narr = [...arr, 4];\nconsole.log(arr); // [1, 2, 3, 4]\n```\n\nIn this code, we used the spread operator (`...`) to spread the elements of the original array `arr` and then added the element `4` at the end. We then assigned the updated array to the same variable `arr`.\n\nBoth methods achieve the same result of adding an element to an array. The choice between using `push()` method or spread operator depends on your individual preferences and the situation.", "Array_With_different_types": "In JavaScript ECMAScript 2021, we can create an array with different types using the `Array` constructor or using array literal syntax. Here are some examples.\n\nUsing the `Array` constructor:\n\n```javascript\nconst mixedArray = new Array(true, 25, \"foo\", {name: \"John Doe\"}); // creates an array with boolean, number, string and object types\nconsole.log(mixedArray); // output: [true, 25, \"foo\", {name: \"John Doe\"}]\n```\n\nUsing array literal syntax:\n\n```javascript\nconst mixedArray = [true, 25, \"foo\", {name: \"John Doe\"}]; // creates an array with boolean, number, string and object types\nconsole.log(mixedArray); // output: [true, 25, \"foo\", {name: \"John Doe\"}]\n```\n\nIn the above examples, the array contains four elements of Boolean, Number, String and Object types. Both ways work in creating an array of different types, but the array literal syntax is much shorter and readable. The key point is to put the values of different types together in one array.", "Array_Include_": "In JavaScript, we can check if an array includes an element in multiple ways. One of the easiest and efficient ways is by using the `includes()` method. \n\nThe `includes()` method determines whether an array includes a certain element, returning either `true` or `false` as appropriate. This method compares the element with every item in the array using strict equality (the same method used by the `===` operator).\n\nHere is an example of using the `includes()` method:\n\n```\nconst numbers = [10, 20, 30, 40, 50];\nconsole.log(numbers.includes(30)); // Output: true\nconsole.log(numbers.includes(25)); // Output: false\n```\n\nIn this example, we first create an array called `numbers` that contains multiple elements. We then use the `includes()` method to check if the number `30` is present within the array. As `30` is included in the array, the output is `true`. We then check if another number, `25`, is present within the array, which is not included in the array, so the output is `false`. \n\nIt's important to note that the `includes()` method is case-sensitive, which means that it will match elements based on their exact value and case. So, for example, `includes('apple')` will not match with `'Apple'`.\n\nAnother way to check if an element exists in an array is by using the `indexOf()` method. This method returns the index of the element if it exists in the array, and `-1` if it does not exist. Here is an example:\n\n```\nconst fruits = ['apple', 'banana', 'grape', 'kiwi'];\nconsole.log(fruits.indexOf('banana')); // Output: 1\nconsole.log(fruits.indexOf('orange')); // Output: -1\n```\n\nIn this example, we first create an array called `fruits`, which contains multiple elements. We then use the `indexOf()` method to check if the string `'banana'` exists in the `fruits` array. Since it exists in the array, the output is `1`, which is the index at which the element is found. We then check if another string, `'orange'`, exists in the `fruits` array, but it does not exist, so the output is `-1`.\n\nBoth `includes()` and `indexOf()` methods are very handy in checking if an element exists in an array in JavaScript- ECMAScript 2021.", "Array_Iterate": "Iterating over an array in JavaScript is a common programming task. There are several ways to iterate over an array in JavaScript.\n\n1. Using a for loop: \n\nA for loop can be used to iterate over each element in an array. The loop runs until the last element in the array is reached. Here's an example:\n\n```javascript\nconst arr = [1, 2, 3];\n\nfor (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n```\n\nOutput:\n```\n1\n2\n3\n```\n\n2. Using forEach() method:\n\nThe forEach() method is a built-in method on the array object that allows you to execute a function on each element in an array. Here's an example:\n\n```javascript\nconst arr = [1, 2, 3];\n\narr.forEach(function(value) {\n  console.log(value);\n});\n```\n\nOutput:\n```\n1\n2\n3\n```\n\n3. Using for...of loop:\n\nThe for...of loop is a new loop added in ECMAScript 2015 that allows you to loop over iterable objects like arrays. Here's an example:\n\n```javascript\nconst arr = [1, 2, 3];\n\nfor (const value of arr) {\n  console.log(value);\n}\n```\n\nOutput:\n```\n1\n2\n3\n```\n\n4. Using map() method:\n\nThe map() method is a built-in method on the array object that creates a new array by executing a function on each element in an array. Here's an example:\n\n```javascript\nconst arr = [1, 2, 3];\n\nconst newArr = arr.map(function(value) {\n  return value * 2;\n});\n\nconsole.log(newArr); // [2, 4, 6]\n```\n\nThese are some of the ways to iterate over an array in JavaScript - ECMAScript 2021.", "Array_Iterate_with_index": "In ECMAScript 2021, there are various ways to iterate over an array with index in JavaScript. Some of them include:\n\n1. Traditional for loop:\n\nThe traditional for loop is the most common way to iterate over an array with index in JavaScript. Here is an example:\n\n```\nconst array = [\"apple\", \"banana\", \"orange\"];\n\nfor(let i = 0; i < array.length; i++) {\n   console.log(i, array[i]);\n}\n```\n\nOutput:\n\n```\n0 apple\n1 banana\n2 orange\n```\n\n2. for...of loop:\n\nThe for...of loop is another way to iterate over an array with index. It is simpler and more readable. Here is an example:\n\n```\nconst array = [\"apple\", \"banana\", \"orange\"];\n\nfor(let [index, element] of array.entries()) {\n   console.log(index, element);\n}\n```\n\nOutput:\n\n```\n0 apple\n1 banana\n2 orange\n```\n\n3. forEach method:\n\nThe forEach method is a built-in method to iterate over an array with index in JavaScript. Here is an example:\n\n```\nconst array = [\"apple\", \"banana\", \"orange\"];\n\narray.forEach((element, index) => {\n   console.log(index, element);\n});\n```\n\nOutput:\n\n```\n0 apple\n1 banana\n2 orange\n```\n\nNote: The forEach method does not return a value, so you cannot use it for filtering or mapping the array.\n\n4. for...in loop:\n\nThe for...in loop is not recommended to iterate over an array with index because it can also iterate over object properties. Use it only when you need to access the property name, not the value. Here is an example:\n\n```\nconst array = [\"apple\", \"banana\", \"orange\"];\n\nfor(let index in array) {\n   console.log(index, array[index]);\n}\n```\n\nOutput:\n\n```\n0 apple\n1 banana\n2 orange\n```\n\nNote: The for...in loop can also iterate over properties inherited from the prototype chain.", "Array_Get_first__last_element": "In JavaScript - ECMAScript 2021, you can use the `Array.prototype.slice()` method to get the first and last element of an array.\n\nTo get the first element of an array, you can use the `slice()` method with an argument of `0` (which represents the starting index). To get the last element of an array, you can use the `slice()` method with an argument of `-1` (which represents the last index).\n\nHere are some examples:\n\n```javascript\n// First element of an array\nconst myArray = [1, 2, 3, 4, 5];\nconst firstElement = myArray.slice(0, 1)[0];\nconsole.log(firstElement); // Output: 1\n\n// Last element of an array\nconst lastElement = myArray.slice(-1)[0];\nconsole.log(lastElement); // Output: 5\n```\n\nAlternatively, you could also use array destructuring to access the first and last elements of an array:\n\n```javascript\n// First and last elements of an array using array destructuring\nconst [first, ...middle, last] = myArray;\nconsole.log(first); // Output: 1\nconsole.log(last); // Output: 5\n```", "Array_Find_first": "In JavaScript-ECMAScript 2021, we can find the first element of an array in a number of ways. Here are some examples:\n\n1. Using array indexing: We can use square brackets after the array name to access the first element of the array. The first element has an index of 0.\n\n```javascript\nlet myArray = [\"apple\", \"banana\", \"grape\"];\nlet firstElement = myArray[0];\nconsole.log(firstElement); // Output: \"apple\"\n```\n\n2. Using the shift() method: The shift() method is used to remove the first element from an array and return it. This method modifies the original array.\n\n```javascript\nlet myArray = [\"apple\", \"banana\", \"grape\"];\nlet firstElement = myArray.shift();\nconsole.log(firstElement); // Output: \"apple\"\nconsole.log(myArray); // Output: [\"banana\", \"grape\"]\n```\n\n3. Using array destructuring: We can use array destructuring to assign the first element of an array to a variable.\n\n```javascript\nlet myArray = [\"apple\", \"banana\", \"grape\"];\nlet [firstElement] = myArray;\nconsole.log(firstElement); // Output: \"apple\"\n```\n\n4. Using the slice() method: The slice() method can be used to extract a portion of an array, starting from a given position.\n\n```javascript\nlet myArray = [\"apple\", \"banana\", \"grape\"];\nlet firstElement = myArray.slice(0, 1);\nconsole.log(firstElement); // Output: [\"apple\"]\n```\n\nIn summary, there are multiple ways to find the first element of an array in JavaScript-ECMAScript 2021. ", "Array_Select__find_all_": "To find all elements of an array satisfying a condition in JavaScript - ECMAScript 2021, you can use the `Array.prototype.filter` method, which creates a new array with all elements that pass the specified condition.\n\nThe syntax for `Array.prototype.filter` is as follows:\n\n```javascript\nconst newArray = array.filter(function(element) {\n  // Condition to be checked\n});\n```\n\nHere `newArray` is the new array returned by the `filter()` method, `array` is the original array, and `element` is the current element being processed.\n\nFor example, let's say we have an array of numbers and we want to find all even numbers from it. We can use the `filter()` method to achieve it as below:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst evenNumbers = numbers.filter(function(number) {\n  return number % 2 === 0;\n});\n\nconsole.log(evenNumbers); // Output: [2, 4, 6, 8]\n```\n\nIn this example, we passed a function to `filter()` that checks if the element is even or not. If the element is even, it returns true, else false. The `filter()` method creates a new array `evenNumbers` containing only the even numbers from the original array `numbers`.\n\nYou can also use arrow function expression syntax to achieve the same result as follows:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst evenNumbers = numbers.filter((number) => number % 2 === 0);\n\nconsole.log(evenNumbers); // Output: [2, 4, 6, 8]\n```\n\nIn this syntax, you can use shorthand `() => {}` syntax to define the callback function for the `filter()` method.\n\nThis is how you can find all elements of an array satisfying a condition in JavaScript - ECMAScript 2021.", "Array_Map__change_all_": "To change all elements of an array, you can use various array methods that modify the original array. Here are some examples:\n\n1. Using the `fill()` method:\n   ```\n   const arr = [1, 2, 3, 4];\n   arr.fill(0);\n   console.log(arr); // Output: [0, 0, 0, 0]\n   ```\n   In the example above, the `fill()` method replaces all elements of the `arr` array with `0`.\n\n2. Using the `map()` method:\n   ```\n   const arr = [1, 2, 3, 4];\n   const newArr = arr.map(item => item * 2);\n   console.log(newArr); // Output: [2, 4, 6, 8]\n   ```\n   In the example above, the `map()` method creates a new array (`newArr`) with all elements of the `arr` array multiplied by `2`.\n\n3. Using the `forEach()` method:\n   ```\n   const arr = [1, 2, 3, 4];\n   arr.forEach((item, index) => {\n     arr[index] = item * 2;\n   });\n   console.log(arr); // Output: [2, 4, 6, 8]\n   ```\n   In the example above, the `forEach()` method iterates over each element of the `arr` array and multiplies it by `2`. The updated values are then assigned back to the `arr` array using the `index` parameter.\n\nNote that each of these methods modifies the original array, so be careful when using them in your code.", "Array_Concatenation": "In JavaScript - ECMAScript 2021, you can concatenate two arrays using the `concat()` method. This method combines two or more arrays into one new array without modifying the original arrays. \n\nHere is the syntax for the `concat()` method:\n\n```\nconst newArray = array1.concat(array2);\n```\n\nWhere `array1` and `array2` are the arrays that you want to concatenate. The `concat()` method returns a new array that contains all the elements from `array1` and `array2`.\n\nHere's an example:\n\n```\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst newArray = arr1.concat(arr2);\n\nconsole.log(newArray); // Output: [1, 2, 3, 4, 5, 6]\n```\n\nYou can also concatenate more than two arrays by passing them as arguments to the `concat()` method:\n\n```\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [7, 8, 9];\nconst newArray = arr1.concat(arr2, arr3);\n\nconsole.log(newArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n``` \n\nNote that the `concat()` method does not modify the original arrays. It creates a new array with the combined elements from the original arrays.", "Array_Sort": "In JavaScript - ECMAScript 2021, there are several ways to sort an array. Here are some examples:\n\n1. Using the sort() method: The sort() method sorts the elements of an array in place and returns the sorted array. It takes an optional function as an argument, which defines the sort order. By default, it sorts the array in ascending order.\n\nExample:\n\n```javascript\nconst fruits = ['banana', 'apple', 'orange', 'watermelon', 'grape'];\nfruits.sort();\nconsole.log(fruits); // Output: ['apple', 'banana', 'grape', 'orange', 'watermelon']\n```\n\n2. Using a custom sort function: You can define your own sorting function to customize the sort order. The function should take two arguments and return a positive number if the first argument should come before the second, a negative number if it should come after, and zero if they are equal.\n\nExample:\n\n```javascript\nconst numbers = [10, 30, 20, 5, 15];\nnumbers.sort((a, b) => a - b); // sort in ascending order\nconsole.log(numbers); // Output: [5, 10, 15, 20, 30]\n\nnumbers.sort((a, b) => b - a); // sort in descending order\nconsole.log(numbers); // Output: [30, 20, 15, 10, 5]\n```\n\n3. Using the spread operator and the spread syntax: You can use the spread operator (...) and the spread syntax to clone the array, sort it, and create a new sorted array.\n\nExample:\n\n```javascript\nconst originalArray = [3, 1, 4, 1, 5, 9, 2, 6, 5];\nconst sortedArray = [...originalArray].sort();\nconsole.log(sortedArray); // Output: [1, 1, 2, 3, 4, 5, 5, 6, 9]\n```", "Array_Multidimensional": "A multidimensional array is an array of arrays. You can create a multidimensional array in JavaScript by defining an array that contains one or more arrays as its elements.\n\nTo create a multidimensional array and initialize it in JavaScript, you can follow these steps:\n\n1. Define an array and assign it to a variable.\n\n```\nlet myArray = [];\n```\n\n2. Add arrays to the main array as elements. These will be the sub-arrays that create the multidimensional array.\n\n```\nmyArray[0] = [1, 2, 3];\nmyArray[1] = [4, 5, 6];\n```\n\n3. You can also define the sub-arrays separately, and then assign them to the main array.\n\n```\nlet subArray1 = [1, 2, 3];\nlet subArray2 = [4, 5, 6];\nlet myArray = [subArray1, subArray2];\n```\n\nHere's an example of how to create and initialize a 3-dimensional array:\n\n```\nlet my3DArray = [\n  [\n    [1, 2, 3],\n    [4, 5, 6]\n  ],\n  [\n    [7, 8, 9],\n    [10, 11, 12]\n  ]\n];\n```\n\nIn this example, `my3DArray` is an array of two arrays, each of which contains two sub-arrays. Each of these sub-arrays contains three elements.\n\nYou can access individual elements in a multidimensional array using the index notation. For example, to access the value at index (0,1,2) in the above 3-dimensional array, you would use:\n\n```\nconsole.log(my3DArray[0][1][2]); // Output: 6\n```", "Array_Size": "To get the size of an array in JavaScript - ECMAScript 2021, you can use the `length` property of the array. This property returns the number of elements in the array.\n\nHere's an example:\n\n```\nconst myArray = [1, 2, 3, 4, 5];\nconsole.log(myArray.length); // Output: 5\n```\n\nIn this example, we define an array named `myArray` with five elements. We then use the `length` property to get the size of the array, which is equal to 5.\n\nAnother example:\n\n```\nconst myOtherArray = ['apple', 'banana', 'orange'];\nconsole.log(myOtherArray.length); // Output: 3\n```\n\nIn this example, we define an array named `myOtherArray` with three elements. We then use the `length` property to get the size of the array, which is equal to 3.\n\nNote that the `length` property returns 0 for an empty array, like this:\n\n```\nconst emptyArray = [];\nconsole.log(emptyArray.length); // Output: 0\n```", "Array_Count": "To count the number of elements in an array matching a condition in JavaScript (ECMAScript 2021), you can use the `filter()` method to retrieve a new array containing all elements that pass the specified condition. Then, you can use the `length` property of the filtered array to get the count of elements that match the condition.\n\nHere's an example:\n\n```javascript\n// Sample array of numbers\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// Count the number of even numbers in the array\nconst evenNumbersCount = numbers.filter(number => number % 2 === 0).length;\n\nconsole.log(`There are ${evenNumbersCount} even numbers in the array.`);\n// Output: There are 5 even numbers in the array.\n```\n\nIn this example, the `filter()` method is used to create a new array called `evenNumbers` that contains only the even numbers from the original `numbers` array. Then, `evenNumbers.length` is used to get the count of even numbers in the array, which is outputted to the console.\n\nYou can modify the condition to match different criteria depending on the requirements of your particular use case.", "Array_Reduce": "In JavaScript (ECMAScript 2021), we can use the `Array.reduce()` method to reduce an array to a single value. The `reduce()` method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.\n\nSyntax:\n\n```\narray.reduce(function(accumulator, currentValue, currentIndex, array) {\n  // operation to reduce the array here\n}, initialValue);\n```\n\nThe `reduce()` method takes two arguments: a callback function and an optional initial value for the accumulator.\n\nThe callback function takes four arguments: the accumulator, the current element value, the current element index, and the array itself. The callback function should return the new value to be used as the accumulator.\n\nExample 1: \n\nLet's say we want to reduce an array of numbers to its sum:\n\n```\nconst numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce(function(accumulator, currentValue) {\n  return accumulator + currentValue;\n});\nconsole.log(sum); // 15\n```\n\nIn this example, the `reduce()` method takes an initial value of 0 for the accumulator. The callback function takes two arguments: the accumulator and the current element value. The function returns the sum of the accumulator and the current value, which becomes the new value of the accumulator in the next iteration.\n\nExample 2:\n\nLet's say we want to reduce an array of strings to its longest length:\n\n```\nconst words = ['Hello', 'world', 'this', 'is', 'JavaScript'];\nconst longestLength = words.reduce(function(accumulator, currentValue) {\n  if (currentValue.length > accumulator) {\n    return currentValue.length;\n  } else {\n    return accumulator;\n  }\n}, 0);\nconsole.log(longestLength); // 10\n```\n\nIn this example, the `reduce()` method takes an initial value of 0 for the accumulator. The callback function takes two arguments: the accumulator and the current element value. The function checks if the length of the current value is greater than the accumulator. If true, it returns the length of the current value as the new accumulator value, otherwise it returns the current accumulator value.", "Array_Index_of_element": "To get the index of an element in an array in JavaScript - ECMAScript 2021, we can use the `indexOf()` and `findIndex()` methods. Here are some examples:\n\n1. Using `indexOf()` method:\nThe `indexOf()` method returns the first index at which a given element can be found in the array, or -1 if it is not present. \n\n```javascript\nconst fruits = [\"apple\", \"banana\", \"orange\", \"mango\"];\n\n// Get index of \"banana\"\nconsole.log(fruits.indexOf(\"banana\")); // Output: 1\n\n// Get index of \"pear\", which is not present in array\nconsole.log(fruits.indexOf(\"pear\")); // Output: -1\n```\n\n2. Using `findIndex()` method:\nThe `findIndex()` method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1.\n\n```javascript\nconst people = [\n  { name: \"John\", age: 25 },\n  { name: \"Mary\", age: 30 },\n  { name: \"Peter\", age: 35 },\n  { name: \"Ann\", age: 20 }\n];\n\n// Find index of Peter\nconst index = people.findIndex(person => person.name === \"Peter\");\nconsole.log(index); // Output: 2\n\n// Find index of person whose age is greater than 30\nconst ageIndex = people.findIndex(person => person.age > 30);\nconsole.log(ageIndex); // Output: 2\n```\n\nNote: Both `indexOf()` and `findIndex()` methods return the index of the first occurrence of the element that matches the specified criteria. However, `indexOf()` only works with primitive types (strings, numbers, etc.), while `findIndex()` can work with any type of array elements.", "Array_Delete_element": "In JavaScript - ECMAScript 2021, you can delete an element from an array using the `splice()` method. The `splice()` method allows you to remove a specified number of elements starting from a given index position.\n\nHere's how you can delete an element by its index position using `splice()` method in JavaScript - ECMAScript 2021:\n\n```javascript\nlet arr = ['apple', 'banana', 'orange', 'mango'];\n\n// delete the second element (banana) from the array\narr.splice(1, 1);\n\nconsole.log(arr); // Output: ['apple', 'orange', 'mango']\n```\n\nIn the above example, `splice(1, 1)` is used to remove one element starting from the index position 1, which deletes the second element 'banana' from the array.\n\nYou can also delete multiple elements from an array using the `splice()` method:\n\n```javascript\nlet arr = ['apple', 'banana', 'orange', 'mango'];\n\n// delete two elements starting from index position 1\narr.splice(1, 2);\n\nconsole.log(arr); // Output: ['apple', 'mango']\n```\n\nIn the above example, `splice(1, 2)` is used to remove two elements starting from the index position 1, which deletes 'banana' and 'orange' from the array.", "Array_Unique": "In JavaScript, there are multiple ways to get the unique elements of an array. Here are a few examples using the latest version of ECMAScript (2021):\n\n1. Using the Set objects - In ECMAScript 6, a new data structure called the Set object was introduced, which creates a collection of unique values.\n\n```\nlet arr = [1, 2, 2, 3, 3, 4];\nlet uniqueArr = [...new Set(arr)];\nconsole.log(uniqueArr); // [1, 2, 3, 4]\n```\n\n2. Using the filter() method - This method creates a new array with all elements that pass the test implemented by the provided function. We can use this to filter out any elements that are not unique.\n\n```\nlet arr = [1, 2, 2, 3, 3, 4];\nlet uniqueArr = arr.filter((item, index) => arr.indexOf(item) === index);\nconsole.log(uniqueArr); // [1, 2, 3, 4]\n```\n\n3. Using the reduce() method - This method is used to apply a function to each element of the array to reduce the array to a single value. We can use this to check if an element already exists in the array and add it only if it doesn't.\n\n```\nlet arr = [1, 2, 2, 3, 3, 4];\nlet uniqueArr = arr.reduce((acc, val) => acc.includes(val) ? acc : [...acc, val], []);\nconsole.log(uniqueArr); // [1, 2, 3, 4]\n```\n\nAll of the above methods will give us an array containing only the unique elements of the original array.", "Hash__map__Create_populated": "A hash in JavaScript is simply an object that contains key-value pairs. With ECMAScript 2021, you can create a hash using the `Map` object or using the object literal notation with computed property names in square brackets. Here are examples for both approaches:\n\n## Using the `Map` object\n\n```javascript\n// Create a new map\nconst hash = new Map();\n\n// Add key-value pairs\nhash.set('key1', 'value1');\nhash.set('key2', 'value2');\n\n// Access a value using its key\nconsole.log(hash.get('key1')); // output: 'value1'\nconsole.log(hash.get('key2')); // output: 'value2'\n```\n\n## Using object literal notation with computed property names\n\n```javascript\n// Create the hash object\nconst hash = {\n  ['key1']: 'value1',\n  ['key2']: 'value2'\n};\n\n// Access a value using its key\nconsole.log(hash['key1']); // output: 'value1'\nconsole.log(hash['key2']); // output: 'value2'\n```\n\nIn both examples, we define key-value pairs and then access their values using their respective keys. The `Map` object is generally recommended when you need to manage a larger number of key-value pairs and need to perform more advanced operations, such as iterating over all key-value pairs in the map. On the other hand, using object literal notation can be more concise and easier to read in some cases, especially when you have a small number of key-value pairs.", "Hash__map__Add": "Sure, I'd be happy to help!\n\nIn JavaScript (ECMAScript), there are a couple of different ways to add an element to a hash:\n\n1. Using bracket notation and assignment:\n\nYou can add a new key-value pair to a hash (also known as an object) using square bracket notation and assignment operator. Here's an example of how to add a new element to a hash:\n\n```javascript\n// create a new empty hash\nlet myHash = {};\n\n// add a new key-value pair to the hash\nmyHash[\"name\"] = \"John\";\n\nconsole.log(myHash);\n// Output: { name: \"John\" }\n```\n\n2. Using dot notation and assignment:\n\nYou can also add a new key-value pair to a hash using dot notation and the assignment operator. Here's an example of how to add a new element to a hash using dot notation:\n\n```javascript\n// create a new empty hash\nlet myHash = {};\n\n// add a new key-value pair to the hash\nmyHash.name = \"John\";\n\nconsole.log(myHash);\n// Output: { name: \"John\" }\n```\n\n3. Using the Object.assign() method:\n\nYou can also use the `Object.assign()` method to add one or more key-value pairs to a hash. Here's an example of how to add a new element to a hash using the `Object.assign()` method:\n\n```javascript\nlet myHash = { name: \"John\" };\n\n// add a new key-value pair to the hash using Object.assign()\nmyHash = Object.assign(myHash, { age: 42 });\n\nconsole.log(myHash);\n// Output: { name: \"John\", age: 42 }\n```\n\nIn the example above, we created a new key-value pair `{ age: 42 }` and used the `Object.assign()` method to add it to the `myHash` object.\n\nI hope this helps! Let me know if you have any other questions.", "Hash__map__Iterate": "To iterate over a hash (also known as an object) in JavaScript - ECMAScript 2021, you can use several methods. Here are some examples:\n\n1. for...in loop:\n\nThe for...in loop allows you to iterate over the properties of an object. Here is an example:\n\n```\nconst hash = {foo: 1, bar: 2, baz: 3};\nfor (const key in hash) {\n  console.log(`${key}: ${hash[key]}`);\n}\n```\n\nOutput:\n\n```\nfoo: 1\nbar: 2\nbaz: 3\n```\n\n2. Object.entries() method:\n\nThe Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs. Here is an example:\n\n```\nconst hash = {foo: 1, bar: 2, baz: 3};\nfor (const [key, value] of Object.entries(hash)) {\n  console.log(`${key}: ${value}`);\n}\n```\n\nOutput:\n\n```\nfoo: 1\nbar: 2\nbaz: 3\n```\n\n3. Object.keys() with forEach() method:\n\nThe Object.keys() method returns an array of a given object's own enumerable property names. You can then use the forEach() method to iterate over the keys and access the corresponding values from the object. Here is an example:\n\n```\nconst hash = {foo: 1, bar: 2, baz: 3};\nObject.keys(hash).forEach((key) => {\n  console.log(`${key}: ${hash[key]}`);\n});\n```\n\nOutput:\n\n```\nfoo: 1\nbar: 2\nbaz: 3\n```\n\nNote: It's important to keep in mind that the order of iteration over object properties is not guaranteed.", "Hash__map__Include_": "In ECMAScript 2021, you can check if a hash (also known as object or dictionary) includes a certain key using the \"in\" operator or the \"hasOwnProperty\" method.\n\n1. Using the \"in\" operator:\n\nTo check if a hash includes a key using the \"in\" operator, write the code like this example:\n\nconst myObj = {a: 1, b: 2, c: 3};\n\nif ('a' in myObj) {\n  console.log('myObj has the key \"a\"');\n} else {\n  console.log('myObj does not have the key \"a\"');\n}\n\n// Output: myObj has the key \"a\"\n\nIn the example above, we create a hash called \"myObj\", which includes three keys (\"a\", \"b\", and \"c\"). We then use the \"in\" operator to check if \"myObj\" includes the key \"a\". If it does, we print a message saying that \"myObj\" has the key \"a\". If it doesn't, we print a message saying that \"myObj\" does not have the key \"a\".\n\n2. Using the \"hasOwnProperty\" method:\n\nTo check if a hash includes a key using the \"hasOwnProperty\" method, write the code like this example:\n\nconst myObj = {a: 1, b: 2, c: 3};\n\nif (myObj.hasOwnProperty('a')) {\n  console.log('myObj has the key \"a\"');\n} else {\n  console.log('myObj does not have the key \"a\"');\n}\n\n// Output: myObj has the key \"a\"\n\nIn the example above, we create a hash called \"myObj\", which includes three keys (\"a\", \"b\", and \"c\"). We then use the \"hasOwnProperty\" method to check if \"myObj\" includes the key \"a\". If it does, we print a message saying that \"myObj\" has the key \"a\". If it doesn't, we print a message saying that \"myObj\" does not have the key \"a\".", "Hash__map__Get_value": "In JavaScript - ECMAScript 2021, we can get the value of a key in a hash or object using the dot notation or square bracket notation.\n\nHere is an example of getting the value of a key using the dot notation:\n\n```javascript\nconst hash = {\n  name: 'John',\n  age: 25,\n  location: 'New York'\n};\n\nconsole.log(hash.name); // Output: John\nconsole.log(hash.age); // Output: 25\nconsole.log(hash.location); // Output: New York\n```\n\nIn the above example, we have assigned a hash with three different key-value pairs. We use the dot notation to get the value of the keys.\n\nHere is another example of getting the value of a key using square bracket notation:\n\n```javascript\nconst hash = {\n  name: 'John',\n  age: 25,\n  location: 'New York'\n};\n\nconsole.log(hash['name']); // Output: John\nconsole.log(hash['age']); // Output: 25\nconsole.log(hash['location']); // Output: New York\n```\n\nIn the above example, we have again assigned a hash with three different key-value pairs. This time, we use the square bracket notation to get the value of the keys.\n\nBoth of these methods are equivalent, and we can use either depending on personal preference or situation.", "Hash__map__Size": "To get the size of a hash (object) in JavaScript - ECMAScript 2021, we can use the `Object.keys()` method to convert the hash into an array of keys, and then use the `length` property to determine the size of the array.\n\nHere's an example:\n\n```javascript\nconst myHash = { \n  firstKey: \"value1\", \n  secondKey: \"value2\", \n  thirdKey: \"value3\" \n};\n\nconst size = Object.keys(myHash).length;\n\nconsole.log(size); // Output: 3\n```\n\nIn this example, we define a hash called `myHash` with three key-value pairs. We then call `Object.keys()` on `myHash` to get an array of its keys, and find its length using the `length` property. We store the length in a variable called `size`, and finally output the value of `size` to the console.\n\nNote that this method will only work for hashes that have keys that are strings or symbols. If your hash has keys that aren't strings or symbols, the `Object.keys()` method won't work and you'll need to use a different approach.", "Other_structure_Boolean": "Boolean in JavaScript - ECMAScript 2021 is a data type with only two possible values: true or false. It is commonly used to control conditions and loops in a program.\n\nThe syntax to declare a boolean variable in JavaScript is:\n\n```javascript\nlet myBool = true;\n```\n\nHere, \"myBool\" is the name of the variable and \"true\" is the boolean value.\n\nBoolean operators are used to compare values and return a boolean value. The following boolean operators are available in JavaScript:\n\n```javascript\n// Equality operators\nconsole.log(1 == 1); // Output: true\nconsole.log(1 === '1'); // Output: false\n\n// Inequality operators\nconsole.log(1 != 2); // Output: true\nconsole.log(1 !== '1'); // Output: true\n\n// Comparison operators\nconsole.log(5 > 3); // Output: true\nconsole.log(10 < 4); // Output: false\n\n// Logical operators\nconsole.log(true && false); // Output: false\nconsole.log(true || false); // Output: true\nconsole.log(!true); // Output: false\n```\n\nIn the first two examples, the equality operators compare two values and return a boolean value. The first example returns true because both values are equal, while the second example returns false because one value is a string and the other is a number.\n\nIn the next two examples, the inequality operators compare two values and return a boolean value. The first example returns true because both values are not equal, while the second example returns true because one value is a string and the other is a number.\n\nIn the third and fourth examples, the comparison operators compare two values and return a boolean value. The first example returns true because the left value is greater than the right value, while the second example returns false because the left value is less than the right value.\n\nIn the last set of examples, the logical operators compare two boolean values and return a boolean value. The first example returns false because both boolean values are not true, while the second example returns true because at least one boolean value is true. The final example returns false because the boolean value is negated by the \"!\" operator.\n\nThese are some basic examples of using boolean in JavaScript - ECMAScript 2021, and they can be used to implement complex boolean expressions, conditional statements, and loops in a program.", "Other_structure_Constant": "In JavaScript, a constant is a read-only value that cannot be reassigned. Constants are declared using the `const` keyword and are block-scoped like variables declared with `let`.\n\nHere is an example:\n\n```\n// Declare a constant\nconst PI = 3.14159;\n\n// Attempt to reassign the constant (this will throw an error)\nPI = 3.14; // Uncaught TypeError: Assignment to constant variable.\n\n// Constants must be initialized at declaration\nconst greeting; // Uncaught SyntaxError: Missing initializer in const declaration.\n\n// Constants are block-scoped\nif (true) {\n  const message = 'Hello, world!';\n}\nconsole.log(message); // Uncaught ReferenceError: message is not defined\n```\n\nIn the above example, the `PI` constant is initialized with a value and cannot be reassigned later. Attempting to do so will result in a `TypeError`. The `greeting` constant however will throw a `SyntaxError` because it is not initialized at declaration.\n\nConstants can also be used with objects and arrays. While the constant variable cannot be reassigned, the properties or elements within the objects or arrays can still be modified.\n\n```\n// Declare an object constant\nconst person = {\n  name: 'John',\n  age: 30\n};\n\n// Modify a property in the object\nperson.name = 'Jane';\nconsole.log(person); // { name: 'Jane', age: 30 }\n\n// Declare an array constant\nconst numbers = [1, 2, 3];\n\n// Modify an element in the array\nnumbers[0] = 4;\nconsole.log(numbers); // [4, 2, 3]\n```\n\nIn the above example, the `person` and `numbers` constants are object and array types respectively. While the variables themselves are immutable, the properties and elements can still be modified.", "Other_structure_Constant_list": "In JavaScript - ECMAScript 2021, we can use a constant list to define a list of values that cannot be modified after initialization. Here's how to use constant lists in JavaScript:\n\nUsing the `const` keyword, we can declare a constant list like this:\n\n```javascript\nconst my_list = [\"apple\", \"banana\", \"orange\"];\n```\n\nHere, we have defined a constant list called `my_list` that contains three string values. Because we have used the `const` keyword, we cannot modify the contents of the list.\n\nNow, let's see an example of how to use this constant list in a program:\n\n```javascript\nconst my_list = [\"apple\", \"banana\", \"orange\"];\n\nfor (let i = 0; i < my_list.length; i++) {\n  console.log(my_list[i]);\n}\n```\n\nIn this example, we have used a `for` loop to iterate over the elements of the `my_list` constant list and print each element to the console.\n\nWe can also use other methods of arrays such as `map()`, `filter()`, and `reduce()` on constant lists to perform various operations. Here is an example using `map()`:\n\n```javascript\nconst my_numbers = [4, 6, 2, 7];\n\nconst doubled_numbers = my_numbers.map(num => num * 2);\n\nconsole.log(doubled_numbers); // Output: [8, 12, 4, 14]\n```\n\nIn this example, we first create a constant list `my_numbers` that contains four numbers. We then use the `map()` method to create a new constant list called `doubled_numbers` that contains each number in `my_numbers` multiplied by 2.\n\nSo, we can use constant lists in JavaScript - ECMAScript 2021 just like any other array, but we cannot modify the original values of the list after initialization using the `const` keyword.", "Other_structure_Struct": "Unfortunately, JavaScript (ECMAScript) does not have a built-in `struct` data type like other programming languages such as C++, Python, or Swift. However, we can create an object that behaves like a `struct` by following some conventions. Here\u2019s an example:\n\n```\nconst Person = {\n  firstName: '',\n  lastName: '',\n  age: 0,\n  email: '',\n  social: {\n    twitter: '',\n    facebook: '',\n    instagram: '',\n  },\n};\n```\n\nIn this example, we are defining an object named `Person` that contains some properties such as `firstName`, `lastName`, `age`, `email`, and `social`. We could use this `Person` object to represent a contact in an address book application, where we need to store multiple pieces of information about each person.\n\nTo set values for these `Person` properties, we can assign them like this:\n\n```\nconst john = {\n  firstName: 'John',\n  lastName: 'Doe',\n  age: 30,\n  email: 'john.doe@example.com',\n  social: {\n    twitter: '@john_doe',\n    facebook: '/john.doe',\n    instagram: '/john_doe',\n  },\n};\n```\n\nNow, we can access the properties of the `john` object like this:\n\n```\nconsole.log(john.firstName); // Output: John\nconsole.log(john.social.instagram); // Output: /john_doe\n```\n\nWhile this approach isn\u2019t a true `struct`, it provides a similar way to define and organize related data in JavaScript. This style of programming is commonly referred to as `object-based` programming.", "Conditional_If": "In JavaScript - ECMAScript 2021, if statements are used to make decisions in code based on a condition. The basic syntax of an if statement is as follows:\n\n```\nif(condition){\n  // code to be executed if the condition is true\n}\n```\n\nHere, the `condition` is an expression that can either be true or false. If the condition is true, the code inside the if statement will be executed. If the condition is false, the code inside the if statement will be skipped.\n\nExample 1:\n```\nlet age = 18;\nif(age >= 18){\n  console.log(\"You are an adult\");\n}\n```\nIn this example, the condition is `age >= 18`. Since `age` is 18, which is greater than or equal to 18, the condition is true and the code inside the if statement will be executed. The output will be \"You are an adult\".\n\n\nExample 2:\n```\nlet marks = 80;\nif(marks >= 90){\n  console.log(\"Grade A\");\n}else if(marks >= 80){\n  console.log(\"Grade B\");\n}else{\n  console.log(\"Grade C\");\n}\n```\nIn this example, there are multiple conditions using `if...else if...else` statements. If the `marks` are greater than or equal to 90, the output will be \"Grade A\". If the `marks` are greater than or equal to 80, the output will be \"Grade B\". If neither of the conditions are met, the output will be \"Grade C\". Since `marks` is `80` in this example, it satisfies the second condition and the output will be \"Grade B\".", "Conditional_Unless": "In JavaScript - ECMAScript 2021, `unless` is not a valid keyword or operator. However, you can achieve a similar logic using an `if` statement with a negated condition. The `if` statement will execute its code block only when the condition is false.\n\nHere's an example of using `unless` logic with an `if` statement:\n\n```javascript\nlet x = 10;\n\nif (!(x > 20)) {\n  console.log(\"x is not greater than 20\");\n}\n```\n\nIn this example, the code inside the `if` statement block will execute only if `x` is not greater than 20. Therefore, the statement \"x is not greater than 20\" will be logged to the console.\n\nAnother example:\n\n```javascript\nlet y = 5;\n\nif (!(y === 10)) {\n  console.log(\"y is not equal to 10\");\n}\n```\n\nIn this example, the code inside the `if` statement block will execute only if `y` is not equal to 10. Therefore, the statement \"y is not equal to 10\" will be logged to the console.\n\nIn both cases, the `if` statement is used with a negated condition, which is equivalent to using `unless`. This logic can be useful for simplifying code and avoiding nested if-else statements.", "Conditional_If_else": "In JavaScript, if/else is a conditional statement used to execute a block of code based on certain conditions. Here is how to use it in ECMAScript 2021 with examples:\n\n1. Basic if/else statement:\n\n```\nif (condition) {\n   statement1;\n} else {\n   statement2;\n}\n```\n\nThe `condition` is an expression that evaluates to `true` or `false`. If the condition is `true`, `statement1` is executed. If the condition is `false`, `statement2` is executed. Here's an example:\n\n```\nlet age = 18;\nif (age >= 18) {\n   console.log(\"You are an adult\");\n} else {\n   console.log(\"You are not yet an adult\");\n}\n```\n\nOutput: \"You are an adult\"\n\n2. Multiple if statements:\n\n```\nif (condition1) {\n   statement1;\n} else if (condition2) {\n   statement2;\n} else {\n   statement3;\n}\n```\n\nHere, we have multiple conditions to check. If `condition1` is `true`, `statement1` is executed. If `condition1` is `false` and `condition2` is `true`, `statement2` is executed. If both `condition1` and `condition2` are `false`, `statement3` is executed. Here's an example:\n\n```\nlet grade = 80;\nif (grade >= 90) {\n   console.log(\"A grade\");\n} else if (grade >= 80) {\n   console.log(\"B grade\");\n} else if (grade >= 70) {\n   console.log(\"C grade\");\n} else {\n   console.log(\"Fail\");\n}\n```\n\nOutput: \"B grade\"\n\n3. Nested if statements:\n\n```\nif (condition1) {\n   statement1;\n   if (condition2) {\n      statement2;\n   }\n} else {\n   statement3;\n}\n```\n\nHere, we have a condition within another condition. If `condition1` is `true`, `statement1` is executed and then `condition2` is checked. If both `condition1` and `condition2` are `true`, `statement2` is executed. If `condition1` is `false`, `statement3` is executed. Here's an example:\n\n```\nlet x = 10, y = 20;\nif (x > y) {\n   console.log(\"x is greater than y\");\n   if (x - y > 5) {\n      console.log(\"The difference is greater than 5\");\n   }\n} else {\n   console.log(\"y is greater than x\");\n}\n```\n\nOutput: \"y is greater than x\" \n\nThese are the basic syntax and types of if/else statements in JavaScript ECMAScript 2021.", "Conditional_And_Or": "In JavaScript (ECMAScript 2021), `and` and `or` are logical operators that can be used to create conditional expressions. \n\nThe symbol `&&` represents the `and` operator, while the symbol `||` represents the `or` operator. \n\nThe `and` operator `&&` returns `true` if both operands are true, otherwise it returns `false`. \n\nExample:\n\n```\nconst a = 10;\nconst b = 5;\nconst c = 15;\n\n// Using && (and) operator\nif (a > b && b < c) {\n  console.log(\"a is greater than b AND b is less than c\");\n}\n```\n\nIn this example, the code inside the `if` statement will be executed if `a` is greater than `b` AND `b` is less than `c`.\n\nThe `or` operator `||` returns `true` if at least one operand is true, otherwise it returns `false`.\n\nExample:\n\n```\nconst isFemale = true;\nconst isTall = false;\n\n// Using || (or) operator\nif (isFemale || isTall) {\n  console.log(\"You are either female or tall or both\");\n}\n```\n\nIn this example, the code inside the `if` statement will be executed if the person is either female OR tall OR both.\n\nNote that both `&&` and `||` operators short-circuit, which means that they evaluate the second operand only if necessary. If the first operand is enough to determine the result, the second operand is not evaluated at all.\n\nFor example, in the expression `a || b`, if `a` is `true`, `b` is not evaluated, because the result is already `true`. Similarly, in the expression `a && b`, if `a` is `false`, `b` is not evaluated, because the result is already `false`. This can be useful for performance reasons and for avoiding errors when evaluating complex expressions.", "Conditional_Switch": "The `switch` statement is a control flow statement in JavaScript that evaluates an expression and compares it to multiple cases. It then executes the code associated with the first case that matches the expression. Here is the general syntax:\n\n```\nswitch (expression) {\n  case value1:\n    // execute code\n    break;\n  case value2:\n    // execute code\n    break;\n  default:\n    // execute code if no case matches\n}\n```\n\nThe `expression` can be any value or variable, while the `case` statements represent the various conditions that the `expression` may match. The `break` keyword is used to exit the `switch` statement after the code blocks for a particular `case` have been executed. If none of the `case` statements match the `expression`, the `default` code block is executed.\n\nHere's an example to demonstrate the usage of `switch` statement:\n\n```\nlet day = prompt(\"Enter a day of the week (e.g. Monday, Tuesday):\");\n\nswitch (day) {\n  case \"Monday\":\n  case \"Tuesday\":\n  case \"Wednesday\":\n  case \"Thursday\":\n  case \"Friday\":\n    console.log(\"It's a weekday!\");\n    break;\n  case \"Saturday\":\n  case \"Sunday\":\n    console.log(\"It's the weekend!\");\n    break;\n  default:\n    console.log(\"That's not a valid day.\");\n}\n```\n\nIn this example, the user is prompted to enter a day of the week. The `switch` statement then checks the `day` variable against the various cases. If the `day` is a weekday, the first code block is executed; if the `day` is a weekend day, the second code block is executed; and if the `day` is not a valid input, the default code block is executed.", "Conditional_Switch_as_else_if": "In JavaScript, you can use the `switch` statement as an alternative to nested `if-else` statements. The `switch` statement evaluates an expression and executes the corresponding code block for the first matching `case` label. If there is no match for any `case` label, the `default` block is executed.\n\nHere is the general syntax for a `switch` statement:\n\n```\nswitch (expression) {\n  case value1:\n    // code block to execute\n    break;\n  case value2:\n    // code block to execute\n    break;\n  ...\n  default:\n    // code block to execute if none of the cases are matched\n}\n```\n\nHere is an example of using the `switch` statement to replace an `if-else` statement:\n\n```\n// using if-else statement\nlet num = 2;\nif (num === 1) {\n  console.log(\"One\");\n} else if (num === 2) {\n  console.log(\"Two\");\n} else if (num === 3) {\n  console.log(\"Three\");\n} else {\n  console.log(\"Number not found\");\n}\n\n// using switch statement\nlet num = 2;\nswitch (num) {\n  case 1:\n    console.log(\"One\");\n    break;\n  case 2:\n    console.log(\"Two\");\n    break;\n  case 3:\n    console.log(\"Three\");\n    break;\n  default:\n    console.log(\"Number not found\");\n}\n```\n\nIn the above example, both the `if-else` statement and the `switch` statement will produce the same output: \"Two\". However, the `switch` statement is more concise and easier to read for larger conditions.\n\nHere is another example of using the `switch` statement to handle multiple cases for a single output:\n\n```\nlet day = 5;\nswitch (day) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n  case 5:\n    console.log(\"Weekday\");\n    break;\n  case 6:\n  case 7:\n    console.log(\"Weekend\");\n    break;\n  default:\n    console.log(\"Invalid day\");\n}\n```\n\nIn this example, the `switch` statement checks if the `day` variable is a weekday or weekend and outputs accordingly. The use of multiple cases for a single output makes the `switch` statement more efficient and avoids unnecessary repetition of code.", "Conditional_Ternary": "The ternary operator is a shorthand way of writing an if-else statement in JavaScript. It takes three operands:\n\ncondition ? expression1 : expression2\n\nIf the condition is true, the operator returns expression1. If the condition is false, it returns expression2.\n\nExample:\n\n```\nconst num = 5;\nconst message = num > 10 ? \"Greater than 10\" : \"Less than or equal to 10\";\nconsole.log(message); // Output: \"Less than or equal to 10\"\n```\n\nIn this example, num is assigned a value of 5. The ternary operator checks if num is greater than 10. Since it's not, the operator returns the second expression, \"Less than or equal to 10\", which is then assigned to the message variable.\n\nAnother example:\n\n```\nconst isLoggedIn = true;\nconst greeting = isLoggedIn ? \"Welcome back!\" : \"Please sign in\";\nconsole.log(greeting); // Output: \"Welcome back!\"\n```\n\nIn this example, the ternary operator checks whether the isLoggedIn variable is true or false. Since it's true, it returns the first expression, \"Welcome back!\", which is assigned to the greeting variable.\n\nTernary operators can be nested as well. Here's an example:\n\n```\nconst age = 16;\nconst message = age >= 18\n  ? \"You are eligible to vote\"\n  : age >= 16\n    ? \"You are almost eligible to vote\"\n    : \"You are not eligible to vote yet\";\nconsole.log(message); // Output: \"You are almost eligible to vote\"\n```\n\nIn this example, the ternary operator checks whether age is greater than or equal to 18. If it is, it returns the first expression. If it's not, it moves on to the next ternary operator to check if age is greater than or equal to 16. If it is, it returns the second expression. If it's not, it returns the third expression.", "Conditional_If_assign": "In JavaScript, the `if` statement is a conditional statement that executes a block of code if a condition is true. The `if` statement can be combined with the assignment operator to create an `if assign` statement that assigns a value to a variable depending on a certain condition.\n\nHere's the syntax of the `if assign` statement:\n\n```\n(condition) ? variable = valueIfTrue : variable = valueIfFalse;\n```\n\nThis statement assigns `valueIfTrue` to `variable` if `condition` evaluates to `true`. If `condition` evaluates to `false`, it assigns `valueIfFalse` to `variable`.\n\nHere's an example of using `if assign` in JavaScript:\n\n```javascript\nlet age = 25;\nlet isAdult = (age >= 18) ? \"Yes\" : \"No\";\nconsole.log(isAdult); // \"Yes\"\n```\n\nIn this example, the `if assign` statement checks if `age` is greater than or equal to `18`. Since `age` is `25`, the condition is `true`. Therefore, `isAdult` is assigned the value `\"Yes\"`. If `age` was less than `18`, `isAdult` would be assigned the value `\"No\"`.\n\nAnother example of using `if assign` in JavaScript is to handle invalid user inputs:\n\n```javascript\nlet userInput = \"abc\";\nlet number = (!isNaN(userInput)) ? parseInt(userInput) : 0;\nconsole.log(number); // 0\n```\n\nIn this example, the `if assign` statement checks if `userInput` is a number by using the `isNaN()` function. If `userInput` is a number, it is assigned to the `number` variable after being converted to an integer using the `parseInt()` function. If `userInput` is not a number, `number` is assigned the value `0`.\n\nOverall, the `if assign` statement is a useful tool for assigning values to variables based on certain conditions.", "Loop_For": "Sure, here is an explanation on how to use `for` in JavaScript - ECMAScript 2021 with examples:\n\nThe `for` loop in JavaScript is used to iterate over a block of code repeatedly until a specified condition is met. The syntax for a `for` loop is as follows:\n\n```\nfor (initialization; condition; increment/decrement) {\n  // code block to be executed\n}\n```\n- Initialization: This statement is executed only once before the loop starts. It sets the initial value for the loop counter variable.\n\n\n- Condition: This statement is evaluated at the beginning of each iteration. If it is true, the loop continues; if it is false, the loop terminates.\n\n\n- Increment/Decrement: This statement is executed at the end of each iteration. It increases or decreases the loop counter variable.\n\n\nHere are some examples of `for` loops:\n\n1. Printing numbers from 1 to 10:\n\n```\nfor (let i = 1; i <= 10; i++) {\n    console.log(i);\n}\n```\n\n2. Summing up all the numbers from 1 to 10:\n\n```\nlet sum = 0;\nfor (let i = 1; i <= 10; i++) {\n    sum += i;\n}\nconsole.log(\"Sum of numbers from 1 to 10 is: \" + sum);\n```\n\n3. Printing all the elements of an array:\n\n```\nlet arr = [\"apple\", \"banana\", \"cherry\"];\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n```\n\n4. Printing all the key-value pairs of an object:\n\n```\nlet obj = {a: 1, b: 2, c:3};\nfor (let key in obj) {\n    console.log(key + \": \" + obj[key]);\n}\n```\n\nOverall, the `for` loop is a powerful tool in JavaScript that allows you to iterate over data structures, making your code more efficient and concise.", "Loop_For_with_a_step": "In JavaScript, the `for` loop is used to execute a block of code repeatedly. The `for` loop consists of three expressions: initialization, condition, and iteration, separated by semicolons. One of the ways to use `for` loop is with a step, which allows you to increment the loop variable by a specified amount on each iteration.\n\nHere is the syntax for using the `for` loop with a step in JavaScript:\n\n```\nfor (initialization; condition; increment/decrement by step) {\n   // code to be executed\n}\n```\n\nThe `initialization` expression is executed only once at the start of the loop. It initializes the loop variable to a desired value.\n\nThe `condition` expression is evaluated at the beginning of each iteration. If it is true, the loop continues. If it is false, the loop terminates.\n\nThe `step` is the amount by which the loop variable is incremented or decremented on each iteration.\n\nHere are some examples to demonstrate how to use `for` loop with a step:\n\nExample 1:\n\nSuppose you want to print out all even numbers from 0 to 10. You can use the `for` loop with a step of 2 as shown below:\n\n```\nfor (var i = 0; i <= 10; i += 2) {\n   console.log(i);\n}\n```\n\nOutput:\n```\n0\n2\n4\n6\n8\n10\n```\n\nExample 2:\n\nSuppose you want to print out all odd numbers from 1 to 9. You can use the `for` loop with a step of 2 as shown below:\n\n```\nfor (var i = 1; i < 10; i += 2) {\n   console.log(i);\n}\n```\n\nOutput:\n```\n1\n3\n5\n7\n9\n```\n\nExample 3:\n\nSuppose you want to print out the multiplication table of a number (let's say 5) from 1 to 10. You can use the `for` loop with a step of 1 as shown below:\n\n```\nvar num = 5;\n\nfor (var i = 1; i <= 10; i++) {\n   console.log(num + \" * \" + i + \" = \" + (num * i));\n}\n```\n\nOutput:\n```\n5 * 1 = 5\n5 * 2 = 10\n5 * 3 = 15\n5 * 4 = 20\n5 * 5 = 25\n5 * 6 = 30\n5 * 7 = 35\n5 * 8 = 40\n5 * 9 = 45\n5 * 10 = 50\n```", "Loop_Times": "In JavaScript - ECMAScript 2021, you can use `times` in two ways: as a method of the `Number` object and as a method of the `Math` object. Here are examples for both:\n\n### Using `times` as a method of the `Number` object\n\nThe `times` method multiplies a number by another number and returns the result:\n\n```\nconst number = 5;\nconst result = number.times(3); // Multiplies 5 by 3\nconsole.log(result); // Output: 15\n```\n\n### Using `times` as a method of the `Math` object\n\nThe `times` method of the `Math` object multiplies two numbers and returns the result:\n\n```\nconst result = Math.times(2, 3); // Multiplies 2 by 3\nconsole.log(result); // Output: 6\n```\n\nNote that the `Math.times` method is not available in all JavaScript environments. If you get an error message when using it, you can implement your own implementation of `Math.times`:\n\n```\nMath.times = function(a, b) {\n  return a * b;\n}\n``` \n\nThen you can use it like this:\n\n```\nconst result = Math.times(2, 3); // Multiplies 2 by 3\nconsole.log(result); // Output: 6\n``` \n\nThese are simple examples of how to use `times` in JavaScript - ECMAScript 2021. Keep in mind that `times` is not a built-in method of the language, but some libraries and frameworks might use it.", "Loop_While": "The `while` loop is a type of loop statement in JavaScript that allows you to repeatedly execute a block of code as long as a specified condition is true. \n\nThe basic syntax of a `while` loop in ECMAScript 2021 is as follows:\n\n```\nwhile (condition) {\n  // code to be executed\n}\n```\n\nHere, `condition` is the expression that is tested before each iteration of the loop. As long as it returns a truthy value, the loop will continue to execute the block of code inside the loop.\n\nHere are some examples of using `while` loop in JavaScript:\n\nExample 1: Displaying numbers from 1 to 5 using while loop\n\n```\nlet i = 1;\nwhile (i <= 5) {\n  console.log(i);\n  i++;\n}\n```\nOutput:\n```\n1\n2\n3\n4\n5\n```\n\nExample 2: Reversing a string using while loop\n\n```\nlet str = \"hello\";\nlet reversedString = \"\";\nlet i = str.length - 1;\n\nwhile (i >= 0) {\n  reversedString += str[i];\n  i--;\n}\nconsole.log(reversedString);\n```\n\nOutput:\n```\nolleh\n```\n\nExample 3: Calculating the factorial of a number using while loop\n\n```\nfunction factorial(n) {\n  let result = 1;\n  let i = n;\n\n  while (i > 0) {\n    result *= i;\n    i--;\n  }\n\n  return result;\n}\n\nconsole.log(factorial(5)); // Output: 120\n```\n\nIn this example, we define a `factorial` function that takes a number `n` as input and calculates its factorial using a `while` loop. The loop keeps multiplying the `result` variable by `i`, decreasing its value by 1 at each iteration until `i` reaches 1. The final value of `result` is returned as the factorial of `n`.\n\nThese are just a few examples of how you can use the `while` loop in JavaScript. You can use it to perform a wide range of tasks, such as iterating over arrays, fetching data from APIs, implementing game loops, and more.", "Loop_Until": "The `until` statement is not a built-in statement in JavaScript. However, you can achieve similar functionality using a while loop together with a negated condition.\n\nThe syntax for a `while` loop is as follows:\n\n```\nwhile (condition) {\n  statement(s)\n}\n```\n\nHere, the code inside the `while` loop will continue to execute as long as the `condition` is true.\n\nTo use `until` in JavaScript, you can invert the `condition` and use a `while` loop. This results in the loop running until the negated condition becomes `false`.\n\nHere's an example:\n\n```\nlet num = 0;\nuntil (num >= 3) {\n  console.log(num);\n  num++;\n}\n```\n\nThis code will result in a `ReferenceError` because `until` is not a valid statement in JavaScript.\n\nInstead, we can invert the condition and use a `while` loop like this:\n\n```\nlet num = 0;\nwhile (!(num >= 3)) {\n  console.log(num);\n  num++;\n}\n```\n\nHere, the loop will run until `num` is greater than or equal to `3`. The output of this code will be:\n\n```\n0\n1\n2\n```\n\nNote that this is functionally equivalent to a `do-while` loop with the condition inside the `while` clause:\n\n```\nlet num = 0;\ndo {\n  console.log(num);\n  num++;\n} while (num < 3);\n```\n\nThis will produce the same output as the previous example:\n\n```\n0\n1\n2\n```", "Loop_Return_array": "To return an array in JavaScript - ECMAScript 2021, you can simply declare and return an array from a function:\n\nExample 1:\n\n```JavaScript\nfunction returnArray() {\n   return [1, 2, 3, 4, 5];\n}\n\nconsole.log(returnArray()); // Output: [1, 2, 3, 4, 5]\n```\n\nIn the above example, the function `returnArray()` returns an array `[1, 2, 3, 4, 5]`.\n\nExample 2:\n\nYou can also use an arrow function to return an array:\n\n```JavaScript\nconst returnArray = () => [1, 2, 3, 4, 5];\n\nconsole.log(returnArray()); // Output: [1, 2, 3, 4, 5]\n```\n\nIn the above example, the arrow function `returnArray` returns an array `[1, 2, 3, 4, 5]`.\n\nExample 3:\n\nYou can also create an array by using the `new` keyword and the `Array()` constructor:\n\n```JavaScript\nfunction returnArray() {\n   return new Array(1, 2, 3, 4, 5);\n}\n\nconsole.log(returnArray()); // Output: [1, 2, 3, 4, 5]\n```\n\nIn the above example, the function `returnArray()` returns an array `[1, 2, 3, 4, 5]` created using the `Array()` constructor.\n\nExample 4:\n\nYou can also use the spread operator (`...`) to return an array:\n\n```JavaScript\nfunction returnArray() {\n   const arr = [1, 2, 3, 4, 5];\n   return [...arr];\n}\n\nconsole.log(returnArray()); // Output: [1, 2, 3, 4, 5]\n```\n\nIn the above example, the function `returnArray()` first creates an array `[1, 2, 3, 4, 5]`, then spreads it using the spread operator (`...`), and finally returns the spread array.", "Loop_Break": "In JavaScript, the break statement is used to break out of a loop or switch statement. When a break statement is executed in a loop, the loop stops executing and control is passed to the statement immediately after the loop.\n\nHere is an example of how to use the break statement in a for loop:\n\n```\nfor (let i = 1; i <= 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  console.log(i);\n}\n```\n\nIn this example, the for loop will print values from 1 to 4 because once the value of i is equal to 5, the break statement is executed and the loop is terminated.\n\nHere is an example of how to use the break statement in a switch statement:\n\n```\nlet day = \"Tuesday\";\n\nswitch (day) {\n  case \"Monday\":\n    console.log(\"Today is Monday\");\n    break;\n  case \"Tuesday\":\n    console.log(\"Today is Tuesday\");\n    break;\n  case \"Wednesday\":\n    console.log(\"Today is Wednesday\");\n    break;\n  default:\n    console.log(\"Today is some other day\");\n}\n```\n\nIn this example, the switch statement checks the value of the day variable and prints a message based on the value. If the value of day is \"Tuesday\", the console will log \"Today is Tuesday\" and then the break statement will be executed, which causes control to pass to the statement immediately after the switch statement. If the break statement wasn't included, the switch statement would continue to execute and the \"default\" case would be printed.", "Loop_Next_Continue": "In JavaScript - ECMAScript 2021, the `next` and `continue` statements are used within loops to control the execution flow. \n\n1. `next` statement:\nThe `next` statement is used to skip over one iteration of a loop. When the `next` statement is executed, the loop skips to the next iteration without executing any further statements in the current iteration. \n\nExample:\n\n```\nfor (let i = 1; i <= 5; i++) {\n  if (i === 3) {\n    continue;\n  }\n  console.log(i);\n}\n```\n\nOutput:\n```\n1\n2\n4\n5\n```\n\nIn this example, the loop runs from `1` to `5`. When `i` is equal to `3`, the `continue` statement skips over that iteration without executing `console.log(i)`.\n\n2. `continue` statement:\nThe `continue` statement is used to skip a part of the current iteration and continue with the next iteration of the loop. \n\nExample:\n\n```\nlet i = 0;\nwhile (i < 5) {\n  i++;\n  if (i === 3) {\n    next;\n  }\n  console.log(i);\n}\n```\n\nOutput:\n```\n1\n2\n4\n5\n```\n\nIn this example, the loop runs while `i` is less than `5`. When `i` is equal to `3`, the `next` statement is executed, which skips the rest of the current iteration, including the `console.log(i)` statement. The loop then continues with the next iteration.", "Math_Max_Min": "In ECMAScript 2021 (also known as ES12), we can use the `Math.max()` and `Math.min()` methods to get the maximum and minimum values between two or more numbers. Here are examples that illustrate their usage:\n\nTo get the maximum value between two numbers in JavaScript ES12, we can use the `Math.max()` method. The syntax for this method is as follows:\n\n```javascript\nMath.max(number1, number2)\n```\n\nHere's an example:\n\n```javascript\nconst num1 = 5;\nconst num2 = 8;\n\nconst maxNum = Math.max(num1, num2);\n\nconsole.log(maxNum); // Output: 8\n```\n\nTo get the minimum value between two numbers in JavaScript ES12, we can use the `Math.min()` method. The syntax for this method is as follows:\n\n```javascript\nMath.min(number1, number2)\n```\n\nHere's an example:\n\n```javascript\nconst num1 = 5;\nconst num2 = 8;\n\nconst minNum = Math.min(num1, num2);\n\nconsole.log(minNum); // Output: 5\n```\n\nWe can also use these methods to get the maximum/minimum values among multiple numbers, simply by calling the method with multiple arguments. Here's an example:\n\n```javascript\nconst num1 = 5;\nconst num2 = 8;\nconst num3 = 2;\nconst num4 = 10;\n\nconst maxNum = Math.max(num1, num2, num3, num4);\nconst minNum = Math.min(num1, num2, num3, num4);\n\nconsole.log(maxNum); // Output: 10\nconsole.log(minNum); // Output: 2\n```", "Math_Sqrt": "To get the square root of a number in JavaScript ECMAScript 2021, you can use the Math.sqrt() method. This method takes a single argument, which is the number you want to find the square root of. \n\nHere are some examples:\n\nExample 1: \n\n```\n// Find the square root of 9.\n\nconst num = 9;\n\nconst squareRoot = Math.sqrt(num);\n\nconsole.log(squareRoot); // Output: 3\n\n```\n\nExample 2: \n\n```\n// Find the square root of 25.\n\nconst num = 25;\n\nconst squareRoot = Math.sqrt(num);\n\nconsole.log(squareRoot); // Output: 5\n\n```\n\nExample 3: \n\n```\n// Find the square root of a variable.\n\nlet num = 16;\n\nconst squareRoot = Math.sqrt(num);\n\nconsole.log(squareRoot); // Output: 4\n\n// Change the value of the variable.\n\nnum = 36;\n\nconsole.log(Math.sqrt(num)); // Output: 6\n\n```\n\nNote that the Math.sqrt() method only works with positive numbers. If you pass a negative number to this method, it will return NaN (Not a Number).", "Error_handling_Try_catch_finally": "In JavaScript- ECMAScript 2021, try/catch/finally blocks are used for error handling. The basic syntax of try/catch/finally is as follows:\n\n```\ntry {\n   // code to try\n}\ncatch(error) {\n   // code to handle the error\n}\nfinally {\n   // code to execute regardless of the try/catch result\n}\n```\n\nHere, the `try` block contains the code that may throw an error. If an error occurs, control is transferred to the `catch` block, which contains the code to handle the error. The `finally` block contains code that is executed regardless of whether or not an error occurred. \n\nExample 1:\n\n```\ntry {\n  let a = undefinedVariable // undefinedVariable is not defined\n}\ncatch(error) {\n  console.log(error); // error message will be printed\n}\nfinally {\n  console.log('This statement will always be executed');\n}\n```\n\nOutput:\n```\nReferenceError: undefinedVariable is not defined\nThis statement will always be executed\n```\n\nIn this example, `undefinedVariable` is not defined in the try block, so it will throw an error. Therefore, the control is transferred to the catch block, which contains the error message. The finally block will always be executed, in this example, it will print the message.\n\n\nExample 2:\n\n```\ntry {\n  let num = 'Hello'\n  if(isNaN(num)) {\n    throw 'Not a Number';\n  }\n  else {\n    console.log(num*2); // will not execute\n  }\n}\ncatch(error) {\n  console.log(error);\n}\nfinally {\n  console.log('This statement will always be executed');\n}\n```\n\nOutput:\n```\nNot a Number\nThis statement will always be executed\n```\n\nIn this example, the variable `num` is initialized to a string value. The `isNaN()` built-in function checks if the value is not a number and throws an error if it is not. Therefore, control is transferred to the catch block, which contains the error message. The finally block will always be executed, in this example, it will print the message.\n\nSo, try/catch/finally block is helpful in handling various types of errors that may occur during the execution of a program.", "Error_handling_With_a_message": "In JavaScript, the `try`, `catch`, and `finally` statements are used to handle errors and manage the execution of code blocks in a more controlled way. \n\n- The `try` statement is used to enclose the code that may throw an exception. \n- The `catch` statement is used to handle the caught exception. \n- The `finally` statement is used to execute the code block regardless of whether an exception was caught or not.\n\nHere is an example of how to use try/catch/finally with a message in JavaScript - ECMAScript 2021:\n\n```javascript\ntry {\n  // code that may throw an exception\n  const x = y + 1;\n} catch (error) {\n  // handle the caught exception and display the message\n  console.error(\"Error message: \" + error.message);\n} finally {\n  // execute this code block regardless of whether an exception was caught or not\n  console.log(\"Try/catch/finally executed.\");\n}\n```\n\nIn this example, the `try` block contains an expression that may throw an exception. If an exception is thrown, the `catch` block will handle it and display the error message using the `.message` property of the caught exception object. The `finally` block will always execute.\n\nIf no exception is thrown, the `catch` block will be skipped, and only the `finally` block will execute.\n\nYou can also nest multiple `try/catch/finally` blocks to handle different types of errors or to handle them at different levels. Here is an example:\n\n```javascript\ntry {\n  try {\n    // code that may throw an exception\n    const x = y + 1;\n  } catch (error1) {\n    // handle the caught exception and display the message\n    console.warn(\"Warning message: \" + error1.message);\n  } finally {\n    // execute this code block regardless of whether an exception was caught or not\n    console.log(\"Inner try/catch/finally executed.\");\n  }\n} catch (error2) {\n  // handle the caught exception and display the message\n  console.error(\"Error message: \" + error2.message);\n} finally {\n  // execute this code block regardless of whether an exception was caught or not\n  console.log(\"Outer try/catch/finally executed.\");\n}\n```\n\nIn this example, there are two nested `try/catch/finally` blocks, which handle a possible exception differently. The outer `catch/finally` blocks handle any other errors that might occur.\n", "Error_handling_Method": "In JavaScript, try/catch/finally are used in a method to handle errors or exceptions that may occur during the execution of the code. The try block contains the code that may throw an exception and the catch block handles that exception. Finally block, on the other hand, is always executed, regardless of whether an exception is thrown or not. It is used to perform clean-up operations that are required, such as closing a file or releasing resources.\n\nHere is an example of how to use try/catch/finally in a method in JavaScript:\n\n```\nfunction divide(a, b){\n  try {\n    if (b === 0){\n      throw \"Cannot divide by zero\";\n    }\n    else{\n      var result = a / b;\n      console.log(\"Result: \" + result);\n    }\n  }\n  catch (error) {\n    console.log(\"Error: \" + error);\n  }\n  finally {\n    console.log(\"End of division operation.\");\n  }\n}\n```\n\nIn the above example, the `divide` function takes two parameters `a` and `b` and performs a division operation. The try block checks if `b` is zero and throws an exception if it is. If `b` is not zero, it performs the division operation and prints the result to the console. If an exception is thrown, the catch block catches that exception and prints the error message to the console. Finally, the finally block is executed to print the message `End of division operation.` to the console.\n\nWe can call the `divide` function with different values to see how try/catch/finally works:\n\n```\ndivide(10, 2);  // Result: 5\n// End of division operation.\n\ndivide(5, 0);   // Error: Cannot divide by zero\n// End of division operation.\n\ndivide(15, 3);  // Result: 5\n// End of division operation.\n```\n\nIn the above example, the first call `divide(10, 2)` produces the result `Result: 5`, as `a` is 10 and `b` is 2. The second call `divide(5, 0)` throws the exception `\"Cannot divide by zero\"` and the catch block catches that exception and prints the error message to the console. Finally, the `End of division operation.` message is printed in both cases, indicating the end of the operation.", "Error_handling_Throw_exception": "In JavaScript - ECMAScript 2021, we use the `throw` statement to throw an exception. Here's an example:\n\n```\nfunction divideByZero(num1, num2) {\n  if (num2 === 0) {\n    throw new Error(\"Cannot divide by zero\");\n  }\n  return num1 / num2;\n}\n\nconsole.log(divideByZero(10, 0)); // Throws \"Cannot divide by zero\" error\n```\n\nIn this example, we define a function `divideByZero` that takes two arguments `num1` and `num2`. We check if `num2` is equal to zero, and if it is, we throw a new `Error` object with the message \"Cannot divide by zero\". If `num2` is not equal to zero, we return the result of dividing `num1` by `num2`.\n\nHere's another example that demonstrates how to throw a custom exception:\n\n```\nclass CustomException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"CustomException\";\n  }\n}\n\nfunction doSomething() {\n  throw new CustomException(\"Something went wrong\");\n}\n\ntry {\n  doSomething();\n} catch (e) {\n  console.error(e.name + \": \" + e.message);\n}\n```\n\nIn this example, we define a custom exception `CustomException` that extends the built-in `Error` class. We define a `constructor` method that takes a `message` parameter and calls the `super` method to set the `message` property of the `Error` object. We also set the `name` property of the `CustomException` object to \"CustomException\".\n\nWe define a function `doSomething` that throws a new `CustomException` object with the message \"Something went wrong\".\n\nWe then use a `try`/`catch` block to catch the exception thrown by `doSomething`, and we log the name and message properties of the caught exception to the console.\n\nThese are some examples of how to throw exceptions in JavaScript - ECMAScript 2021.", "File_Read": "In JavaScript, there are multiple ways to read a file, but one common way is to use the FileReader API. Here's an example of how to read a file in JavaScript - ECMAScript 2021:\n\n```\n// create a new FileReader object\nconst fileReader = new FileReader();\n\n// use the readAsText method to read the contents of the file\nfileReader.readAsText(file);\n\n// handle the onload event to get the contents of the file\nfileReader.onload = function() {\n  const fileContent = fileReader.result;\n  console.log(fileContent);\n};\n```\n\nIn the above code, `file` is the file object that you want to read. The `readAsText` method is used to read the contents of the file as a string. Once the contents of the file have been read, they are accessible through the `result` property of the `FileReader` object. In this example, we log the contents of the file to the console.\n\nAdditionally, it's important to note that to actually select the file, you will need to use an `<input type=\"file\">` HTML element with a change event listener to pass the selected file to the JavaScript function:\n\n```\n<input type=\"file\" id=\"fileInput\" />\n<script>\n  const fileInput = document.getElementById('fileInput');\n  fileInput.addEventListener('change', function(event) {\n    const file = event.target.files[0];\n\n    // read the contents of the file using the FileReader API\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n    fileReader.onload = function() {\n      const fileContent = fileReader.result;\n      console.log(fileContent);\n    };\n  });\n</script>\n```\n\nIn this example, we listen for the `change` event on the `fileInput` element and use the `files` property of the event target to get the selected file. We then pass the selected file to the `FileReader` API to read its contents.", "File_Write": "In JavaScript, you can write (create and/or overwrite) a file using the Node.js `fs` module. Here's an example:\n\n```javascript\nconst fs = require('fs');\n\nconst content = 'some text to write to the file';\n\nfs.writeFile('example.txt', content, (err) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log('File written successfully.');\n});\n```\n\nIn this example, we first import the `fs` module and then create a variable `content` which contains the text we want to write to the file. Next, we use the `writeFile` method of the `fs` module to write to the file named `example.txt`. The second argument is the content we want to write to the file. The third argument is an optional callback function that will be called once the file has been written (or if an error occurs during writing).\n\nIf the file already exists, its contents will be overwritten. If it does not exist, it will be created. However, if the directory in which you are trying to write doesn't exist, you'll get an error.\n\nYou can also specify additional options when calling `writeFile`, such as encoding and file mode. Here's an example:\n\n```javascript\nconst fs = require('fs');\n\nconst content = 'some text to write to the file';\nconst options = { encoding: 'utf8', mode: 0o666 };\n\nfs.writeFile('example.txt', content, options, (err) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log('File written successfully.');\n});\n```\n\nIn this example, we've added an `options` object as the third argument to `writeFile`. This object contains two properties, `encoding` and `mode`. The `encoding` property is set to `'utf8'`, which specifies that we want to write the file in UTF-8 encoding. The `mode` property is set to `0o666`, which specifies the file permissions (read, write, and execute permissions for all users).\n\nOverall, writing a file in JavaScript is fairly simple and can be done using the `fs` module in Node.js.", "File_Get_working_dir_path": "Getting the current working directory path in JavaScript / ECMAScript 2021 can be done using the `process.cwd()` method. It returns the current working directory of the Node.js process in which the script is running. Here's an example:\n\n```js\nconst cwd = process.cwd();\n\nconsole.log(\"Current working directory: \", cwd);\n```\n\nThe above code will print the current working directory path to the console.\n\nIf you want to get the directory path of the current script file, you can use the `__dirname` global variable. It returns the directory name of the current module (in which the code is executed).\n\n```js\nconst currentDir = __dirname;\n\nconsole.log(\"Directory of current script file: \", currentDir);\n```\n\nThe above code will print the directory path of the current script to the console.", "File_File_path": "In JavaScript, you can use the `import.meta.url` property to get the file path of the currently executing module. This property is available in ECMAScript 2021 and is commonly used in Node.js applications. Here is an example:\n\nSay, we have a file named `example.js` located in `/home/user/documents/` directory and the content of the file is as follows:\n\n```js\nconsole.log(import.meta.url); // logs 'file:///home/user/documents/example.js'\n```\n\nHere, the `import.meta.url` property returns the file path of `example.js`.\n\nWe can also use the `URL` constructor to get a more structured file path. Here\u2019s an example:\n\n```js\nconst filePath = new URL(import.meta.url).pathname;\nconsole.log(filePath); // logs '/home/user/documents/example.js'\n``` \n\nThe `URL` constructor takes the `import.meta.url` value and generates a `URL` object. The `pathname` property of the `URL` object can then be accessed to get the file path.", "File_Dir_path": "To get the directory path in JavaScript \u2013 ECMAScript 2021, you can use the `import.meta.url` property which provides the URL of the current module. By using the Node.js built-in `path` module, you can get the directory path.\n\nHere is an example code for getting the directory path in JavaScript \u2013 ECMAScript 2021:\n\n```js\nimport path from \"path\";\n\n// Get the directory path\nconst dirPath = path.dirname(new URL(import.meta.url).pathname);\n\nconsole.log(dirPath); // Prints the directory path of the current module\n```\n\nIn the above example, the `path.dirname()` function from the `path` module is used to extract the directory path from the URL obtained from `import.meta.url`. Finally, the directory path is logged to the console using the `console.log()` method.", "File_Parent_dir_path": "To get the parent directory path in JavaScript, you can use the `URL` constructor and the `pathname` property.\n\nHere's an example code snippet:\n\n```javascript\nconst url = new URL('https://www.example.com/path/to/file.html');\nconst parentDirPath = url.pathname.split('/').slice(0, -1).join('/') + '/'; // /path/to/\n\nconsole.log(parentDirPath); // Output: /path/to/\n```\n\nThis code creates a new `URL` instance with the file path and then uses the `pathname` property to extract the directory path. The path is split into an array using the `/` delimiter, and then all but the last element (the file name) is selected using `slice`. Finally, the elements of the array are joined back together using `/` to form the parent directory path.\n\nAlternatively, you could use the `path.dirname` method from Node.js, which is available in the latest versions of ECMAScript. Here's an example:\n\n```javascript\nimport { dirname } from 'path';\n\nconst filePath = '/path/to/file.html';\nconst parentDirPath = dirname(filePath);\n\nconsole.log(parentDirPath); // Output: /path/to\n```\n\nThis code imports the `dirname` method from the built-in `path` module in Node.js. The method takes a file path as input and returns the parent directory path.", "File_Sister_dir_path": "The sister directory path can be obtained in JavaScript using the `../` notation to move up one directory level in the file system.\n\nHere's an example of how to get the sister directory path:\n\n```javascript\n// Current directory: /home/user/project/homepage/\nconst sisterDir = '../aboutpage/';\n```\n\nIn the example above, the current directory is `/home/user/project/homepage/`, and the `sisterDir` variable is assigned the path of the `aboutpage` directory in the same level of the file system.\n\nIf the current directory is deeper in the directory structure, then additional `../` notations may be necessary to reach the sister directory. For example:\n\n```javascript\n// Current directory: /home/user/project/homepage/js/\nconst sisterDir = '../../aboutpage/';\n```\n\nIn the second example, the current directory is `/home/user/project/homepage/js/`, and the `sisterDir` variable is assigned the path of the `aboutpage` directory, which is two levels up in the file system.\n\nNote that the `../` notation can also be used multiple times to move up multiple directory levels, as demonstrated in the second example.", "Method___Function_Declare": "In JavaScript - ECMAScript 2021, you can declare a method or function using the `function` keyword. Here's an example:\n\n```\n// Declaring a function\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\n\n// Invoking the function\ngreet('John');\n```\n\nIn the example above, `greet` is the name of the function and `name` is a parameter. When the function is invoked with the `greet('John')` statement, the `name` parameter is passed the string value of `'John'`.\n\nYou can also declare a method as a property of an object using a shorthand method syntax. Here's an example:\n\n```\n// Declaring a method using shorthand method syntax\nconst person = {\n  firstName: 'John',\n  lastName: 'Doe',\n  greet() {\n    console.log(`Hello, ${this.firstName} ${this.lastName}!`);\n  }\n}\n\n// Invoking the method\nperson.greet();\n```\n\nIn the example above, `greet` is declared as a method of the `person` object using the shorthand method syntax. A method declared in this way will automatically bind the `this` keyword to the object the method is called on.", "Method___Function_Multiple_arguments": "In JavaScript, you can pass multiple arguments to a function or method by separating them with commas. Here's an example function that takes two arguments and returns their sum:\n\n```\nfunction sum(a, b) {\n  return a + b;\n}\n\nconsole.log(sum(2, 3)); // Output: 5\n```\n\nHere, `sum` takes two arguments `a` and `b`, and returns their sum. When we call `sum(2, 3)`, it returns `5`.\n\nYou can also pass any number of arguments to a function using the `arguments` object. Here's an example function that adds any number of arguments:\n\n```\nfunction add() {\n  let sum = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n}\n\nconsole.log(add(1, 2, 3, 4)); // Output: 10\n```\n\nHere, `add` can accept any number of arguments. Inside the function, we iterate over the `arguments` object to add up all the values. When we call `add(1, 2, 3, 4)`, it returns `10`.\n\nYou can also use the spread operator (`...`) to pass an array of arguments to a function. Here's an example:\n\n```\nfunction multiply(a, b, c) {\n  return a * b * c;\n}\n\nlet arr = [2, 3, 4];\nconsole.log(multiply(...arr)); // Output: 24\n```\n\nHere, we define a function `multiply` that takes three arguments `a`, `b`, and `c`, and returns their product. We create an array `arr` with three values `[2, 3, 4]`. Then, we use the spread operator to pass the array as separate arguments to the `multiply` function. When we call `multiply(...arr)`, it returns `24`.", "Method___Function_Default_value_for_argument": "In JavaScript, we can define default values for function arguments using the assignment operator, `=`. This means that if the argument is not provided when the function is called, the default value will be used instead.\n\nHere's an example of a function that takes two arguments, `name` and `age`, with `age` having a default value of `18`:\n\n```javascript\nfunction greet(name, age = 18) {\n  console.log(`Hello ${name}, you are ${age} years old.`);\n}\n\ngreet(\"John\"); // Output: Hello John, you are 18 years old.\ngreet(\"Jane\", 25); // Output: Hello Jane, you are 25 years old.\n```\n\nAs you can see, when `greet` is called with only one argument (`name`), the default value `18` is used for `age`.\n\nHere's another example where we define a function that adds two numbers but uses a default value of `0` if the second argument is not provided:\n\n```javascript\nfunction addNumbers(a, b = 0) {\n  return a + b;\n}\n\nconsole.log(addNumbers(4, 5)); // Output: 9\nconsole.log(addNumbers(4)); // Output: 4 (using default value of 0 for b)\n```\n\nIn summary, by using default values for function arguments in JavaScript, we can provide a more flexible and convenient interface for our functions while ensuring that they still work correctly when some arguments are not provided.", "Method___Function_Return": "In JavaScript - ECMAScript 2021, you can return a value from a method or function using the \"return\" keyword followed by the value you want to return. Here's an example:\n\n```\n// Function to check if a number is even or odd\nfunction isEven(num) {\n  if (num % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Call the function with the number 4\nlet result = isEven(4); // Returns true\n```\n\nIn this example, the \"isEven\" function takes in a number and checks if it's even or odd. If the number is even, the function returns true. Otherwise, it returns false. The \"result\" variable stores the value returned by the function.\n\nAnother example:\n\n```\n// Function to calculate the area of a rectangle\nfunction calculateArea(width, height) {\n  let area = width * height;\n  return area;\n}\n\n// Call the function with width = 5 and height = 10\nlet area = calculateArea(5, 10); // Returns 50\n```\n\nIn this example, the \"calculateArea\" function takes in the width and height of a rectangle, calculates its area, and returns the result. The \"area\" variable stores the value returned by the function.", "Method___Function_Closure": "Sure! A closure in JavaScript is a combination of a function and the lexical environment within which that function is defined. Essentially, it allows a function to access an outer function's variable or parameter even after the outer function has returned.\n\nHere's an example:\n\n```\nfunction outerFunction() {\n  const outerVariable = \"I am outside!\";\n\n  function innerFunction() {\n    console.log(outerVariable);\n  }\n\n  return innerFunction;\n}\n\nconst myInnerFunction = outerFunction();\nmyInnerFunction(); // Output: \"I am outside!\"\n```\n\nIn this example, `innerFunction` is defined inside of `outerFunction`. When `outerFunction` is called and `myInnerFunction` is assigned the result of `outerFunction`, `outerVariable` is captured by the closure and is available to `innerFunction`, even though `outerFunction` has since returned.\n\nHere's another example:\n\n```\nfunction createIncrementer(initialValue) {\n  return function() {\n    initialValue++;\n    console.log(initialValue);\n  }\n}\n\nconst increment = createIncrementer(0);\nincrement(); // Output: 1\nincrement(); // Output: 2\nincrement(); // Output: 3\n```\n\nIn this example, `createIncrementer` returns a function that increments the `initialValue` parameter each time it is called. The `initialValue` value is captured by the closure, so each time `increment()` is called, it gets incremented by one.\n\nI hope this helps! Let me know if you have any more questions.", "Method___Function_Block_passing": "Block passing is a new feature introduced in ECMAScript 2021 that provides a way to pass variable declarations to blocks of code. This enables developers to easily control scope and avoid polluting the global namespace.\n\nTo use block passing, we simply need to add the keyword \"let\" or \"const\" before the opening curly brace of the block. Here's an example:\n\n```javascript\n{\n  let x = 10;\n  console.log(x); // Output: 10\n}\nconsole.log(x); // ReferenceError: x is not defined\n```\n\nIn this example, the variable `x` is declared within the block and is only accessible within that block. Attempting to access `x` outside of the block will result in a ReferenceError.\n\nBlock passing can also be used with existing variables:\n\n```javascript\nlet x = 10;\n{\n  const x = 20;\n  console.log(x); // Output: 20\n}\nconsole.log(x); // Output: 10\n```\n\nIn this example, we declare a variable `x` with the value of 10. Within the block, we declare another variable `x` with the value of 20. This does not affect the value of the original `x` variable outside of the block.\n\nOverall, block passing is a simple but useful feature that can help developers control scope and improve code organization.", "Method___Function_Block_binding": "Block binding in JavaScript allows for declaring variables with block scope using the `let` and `const` keywords. This means that the variable's scope is only within the block that it was defined in (i.e. within curly braces `{}`), rather than function-wide as with the `var` keyword.\n\nHere are some examples of using block binding with `let` and `const`:\n\n1. Let\n\n```\nif (true) {\n  let x = 10;\n  console.log(x); // output: 10\n}\nconsole.log(x); // Uncaught ReferenceError: x is not defined\n```\n\nIn this example, the variable `x` is only accessible within the if statement block.\n\n2. Const\n\n```\nif (true) {\n  const y = 20;\n  console.log(y); // output: 20\n}\nconsole.log(y); // Uncaught ReferenceError: y is not defined\n```\n\nIn this example, the variable `y` is also only accessible within the if statement block. However, the `const` keyword is used to indicate that the value of `y` should never change and is thus read-only.\n\n3. Loops\n\n```\nfor (let i = 0; i < 5; i++) {\n  console.log(i); // output: 0, 1, 2, 3, 4\n}\nconsole.log(i); // Uncaught ReferenceError: i is not defined\n```\n\nIn this example, the variable `i` is only accessible within the for loop block. This prevents issues with variable hoisting and unintended overwriting of values in complex loops.\n\nOverall, block binding with `let` and `const` allows for safer and more concise code by limiting the scope of variables to where they are actually needed.", "Method___Function_Initialize_in_runtime": "In JavaScript, we can initialize a method or function in runtime using the Function constructor or the eval function. Here are examples of each:\n\nUsing the Function Constructor:\n\n```javascript\nconst functionName = new Function('param1', 'param2', 'return param1 + param2');\nconsole.log(functionName(2,3)); // Output: 5\n```\n\nIn this example, we are creating a new function called functionName using the Function constructor. We pass in the function parameters as strings and the function body as a string. We then execute this function by calling functionName with values 2 and 3. \n\nUsing the eval Function:\n\n```javascript\nconst functionBody = 'function add(a, b) { return a + b; }';\neval(functionBody);\nconsole.log(add(2,3)); // Output: 5\n```\n\nIn this example, we are creating a new function using the eval function. We define the function body as a string and pass it to the eval function. The eval function evaluates the string as JavaScript code and the `add` function becomes available. We then execute the `add` function with parameters 2 and 3.\n\nHowever, it is important to note that using `eval` is generally not recommended as it can lead to security vulnerabilities in your code.", "Method___Function_Alias": "In JavaScript, an alias is a reference to a variable that has been assigned a different name. It allows developers to create shorter, more convenient names for variables, functions, or properties.\n\nHere is an example of how to use alias in JavaScript - ECMAScript 2021:\n\n```javascript\n// Create a variable called fullName\nlet fullName = 'John Doe';\n\n// Create an alias for fullName\nconst name = fullName;\n\n// Print the value of the alias\nconsole.log(name);    // Output: John Doe\n\n// Update the value of the original variable\nfullName = 'Jane Doe';\n\n// The value of the alias remains the same\nconsole.log(name);    // Output: John Doe\n```\n\nIn this example, we created a variable called `fullName` and assigned it the value \"John Doe\". We then created an alias for the `fullName` variable using the `const` keyword and assigned it the name `name`. We printed the value of the alias using `console.log()`, which printed \"John Doe\". We then updated the value of the `fullName` variable to \"Jane Doe\", but the value of the alias `name` remained the same when printed again using `console.log()`. \n\nUsing an alias can be particularly useful when dealing with long variable names or when a shorter name is more descriptive or easier to read. For example, instead of typing `document.querySelector()` repeatedly to select an element in the DOM, you could create an alias `const $ = document.querySelector` and use it instead like `$('.element-class')`.", "Class_Declare": "To declare a class in ECMAScript 2021, use the 'class' keyword followed by the class name. Here's an example:\n\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nlet cat = new Animal('Fluffy');\ncat.speak();\n```\n\nIn this example, the `Animal` class has a constructor that sets the `name` property, and a `speak()` method that logs a message to the console. To create a new instance of the class, we use the `new` keyword with the class name, passing in any required arguments to the constructor.\n\nAnother example:\n\n```javascript\nclass Person {\n  constructor(name, age, gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n  \n  introduce() {\n    console.log(`Hi, my name is ${this.name}, I am ${this.age} years old and I identify as ${this.gender}.`);\n  }\n}\n\nlet john = new Person('John', 30, 'male');\njohn.introduce();\n```\n\nIn this example, the `Person` class has a constructor that sets the `name`, `age` and `gender` properties, and an `introduce()` method that logs a message to the console. To create a new instance of the class, we use the `new` keyword with the class name, passing in the required arguments to the constructor.", "Class_Constructor": "In ECMAScript 2021 and previous versions, constructors are special functions that are used to create and initialize objects created from a class. Constructors can have parameters that can be used to set the initial properties of the instance.\n\nHere is an example of a simple constructor function in JavaScript:\n\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n```\n\nIn this example, we have defined a `Person` class with a constructor that takes two parameters: `name` and `age`. Inside the constructor, we use the keyword `this` to refer to the current instance of the `Person` class, and we set the `name` and `age` properties of the instance accordingly.\n\nWe can create new instances of the `Person` class using the `new` keyword, as follows:\n\n```\nconst person1 = new Person('John', 30);\nconst person2 = new Person('Jane', 25);\n```\n\nIn this example, we have created two instances of the `Person` class: `person1` and `person2`. The first instance has a `name` of \"John\" and an `age` of 30, while the second instance has a `name` of \"Jane\" and an `age` of 25.\n\nIf we want to add methods to our `Person` class, we can simply define them inside the class, like this:\n\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n```\n\nIn this example, we have added a `sayHello` method to our `Person` class. This method simply logs a message to the console that includes the `name` and `age` properties of the current instance.\n\nWe can call this method on any instance of the `Person` class, like this:\n\n```\nperson1.sayHello(); // logs \"Hello, my name is John and I am 30 years old.\"\nperson2.sayHello(); // logs \"Hello, my name is Jane and I am 25 years old.\"\n```\n\nThis is just a simple example of how to use constructors in JavaScript. Constructors can be used to create more complex classes and objects with more properties and methods.", "Class_Method_call": "Sure, I'd be happy to help!\n\nIn JavaScript - ECMAScript 2021, calling a method in a class involves using the dot notation to access the method and then passing any necessary arguments. Here's an example:\n\n```javascript\nclass Calculator {\n  add(num1, num2) {\n    return num1 + num2;\n  }\n}\n\n// Creating an instance of the class\nconst myCalculator = new Calculator();\n\n// Calling the add method on the instance\nconst result = myCalculator.add(5, 7);\n\nconsole.log(result); // Output: 12\n```\n\nIn this example, we have defined a simple `Calculator` class with an `add` method that takes two arguments and returns their sum. We then create an instance of the class called `myCalculator` and call the `add` method on this instance, passing in the arguments `5` and `7`. The result of this method call is stored in the `result` variable, which we then log to the console.\n\nI hope this helps! Let me know if you have any further questions.", "Class_Static_method": "To define a static method in a class in JavaScript - ECMAScript 2021, we need to prefix the method name with the keyword `static`.\n\nHere's an example of how to define a static method in a class:\n\n```javascript\nclass MyClass {\n  static myStaticMethod() {\n    console.log(\"This is a static method.\");\n  }\n}\n\nMyClass.myStaticMethod(); // Output: \"This is a static method.\"\n```\n\nIn this example, `myStaticMethod()` is the static method of the `MyClass` class. When the method is called, it outputs the string \"This is a static method.\" to the console.\n\nNote that static methods cannot access the `this` keyword and they can only access other static methods or properties of the class. Here's an example:\n\n```javascript\nclass MyClass {\n  static myStaticMethod() {\n    console.log(\"This is a static method.\");\n  }\n\n  static myOtherStaticMethod() {\n    MyClass.myStaticMethod();\n  }\n}\n\nMyClass.myOtherStaticMethod(); // Output: \"This is a static method.\"\n``` \n\nIn this example, `myOtherStaticMethod()` calls the `myStaticMethod()` static method of the `MyClass` class. Since both `myOtherStaticMethod()` and `myStaticMethod()` are static methods, they can access each other without any issues.", "Class_Private_method": "In JavaScript - ECMAScript 2021, private methods can be defined using a new syntax called \"private class fields\". This syntax use the `#` symbol to mark a method as private.\n\nHere is an example of how to define a class with private methods in JavaScript-ES2021:\n\n```javascript\nclass MyClass {\n  #privateMethod () {\n    console.log('This is a private method.')\n  }\n\n  publicMethod () {\n    console.log('This is a public method.')\n    // calling a private method\n    this.#privateMethod()\n  }\n}\n\nlet myObj = new MyClass()\nmyObj.publicMethod() // Output: This is a public method. This is a private method.\nmyObj.#privateMethod() // Uncaught SyntaxError: Private field '#privateMethod' must be declared in an enclosing class.\n```\n\nIn this example, `MyClass` is defined with a private method `#privateMethod()` and a public method `publicMethod()`. \n\nTo access the private method from within the public method, we use `this.#privateMethod()`. \n\nHowever, attempting to access the private method from outside the class, such as `myObj.#privateMethod()`, will result in an error. This is because private methods, like other private class fields, are not accessible from outside the class they were defined in.\n\nBy using private class fields, we can ensure that our private methods remain inaccessible and unmodified from outside the class, providing a secure and encapsulated solution.", "Class_Private_method__access_instance_variable": "In JavaScript, a private method can access instance variables with the help of a closure. A closure is a \"separate\" function that has access to the parent function's variables. To achieve this, we declare the instance variable outside of the private function, and then reference it within the private function. Here is an example:\n\n```javascript\nclass MyClass {\n  #myPrivateVar = \"Hello, World!\";\n\n  #myPrivateMethod() {\n    console.log(this.#myPrivateVar);\n  }\n\n  myPublicMethod() {\n    console.log(\"This is a public method\");\n    this.#myPrivateMethod();\n  }\n}\n\nconst myObject = new MyClass();\nmyObject.myPublicMethod();\n```\n\nIn this example, we define a class `MyClass`, which has a private instance variable, `#myPrivateVar`. We also have a private method, `#myPrivateMethod()`, which logs the value of the private variable to the console.\n\nThe public method, `myPublicMethod()`, logs a message to the console, and then calls `#myPrivateMethod()`.\n\nWhen we create an instance of `MyClass` and call `myPublicMethod()`, we can see that the private method successfully logs the value of the private variable to the console. \n\nNote that private instance variables are denoted by the `#` symbol before their name. Private methods are also denoted by the `#` symbol before their name.", "Class_Field": "Fields in JavaScript - ECMAScript 2021 are a new way to define and manage data within class definitions. Fields are similar to class properties in other object-oriented programming languages. Fields provide a more straightforward syntax compared to traditional properties, making it easier to manage class data. \n\nFields are declared by adding a # before the field name, and they can be assigned a value in the declaration itself. Fields can also include a getter and setter method, which can provide more control over how the data is accessed and modified.\n\nHere is an example of declaring a field in a class:\n\n```\nclass Person {\n  #name = '';\n\n  constructor(name) {\n    this.#name = name;\n  }\n\n  getName() {\n    return this.#name;\n  }\n\n  setName(name) {\n    this.#name = name;\n  }\n}\n```\n\nIn this example, the `Person` class has a private field called `#name` that is initialized to an empty string. The field is accessed and modified using the `getName()` and `setName()` methods.\n\nHere is an example of declaring a field with a getter and setter method:\n\n```\nclass Circle {\n  #radius;\n\n  constructor(radius) {\n    this.#radius = radius;\n  }\n\n  get radius() {\n    return this.#radius;\n  }\n\n  set radius(radius) {\n    if (radius < 0) {\n      throw new Error(\"Radius cannot be negative\");\n    }\n    this.#radius = radius;\n  }\n\n  get area() {\n    return Math.PI * this.#radius ** 2;\n  }\n}\n\nconst circle = new Circle(5);\nconsole.log(circle.radius); // Output: 5\nconsole.log(circle.area); // Output: 78.53981633974483\ncircle.radius = 10;\nconsole.log(circle.radius); // Output: 10\nconsole.log(circle.area); // Output: 314.1592653589793\n```\n\nIn this example, the `Circle` class has a private field called `#radius` that is initialized with the passed-in value. The field has a getter and setter method which control the access to the `#radius` field. The `get area()` method calculates the area of the circle using the `#radius` field and the formula for the area of a circle. \n\nThese are just a few examples of using fields in a class in JavaScript - ECMAScript 2021. Fields provide a cleaner syntax and a more straightforward way of managing class data compared to traditional properties.", "Class_Get_set": "Getters and setters are used to provide more control over the access to class properties in JavaScript. Getters are used to retrieve the value of an object's property, while setters are used to modify it. In this way, we can ensure that the properties of a class are accessed or modified in a controlled way, which can be helpful in preventing errors.\n\nTo define a getter or setter in a class, we use the `get` and `set` keywords followed by the name of the property. Here's an example:\n\n```javascript\nclass Person {\n  constructor(name) {\n    this._name = name;\n  }\n\n  // Getter\n  get name() {\n    return this._name;\n  }\n\n  // Setter\n  set name(newName) {\n    this._name = newName;\n  }\n}\n\nlet person = new Person(\"John\");\n\nconsole.log(person.name); // Output: John\n\nperson.name = \"David\";\nconsole.log(person.name); // Output: David\n```\n\nIn the above example, we created a `Person` class with a `name` property. We defined a getter and a setter for the `name` property. The getter returns the value of the `_name` property, while the setter sets the value of `_name` to the parameter passed to it.\n\nTo access the `name` property, we simply use the dot notation (`person.name`). When we want to set a new value for the `name` property, we use the setter (`person.name = \"David\"`).\n\nNote that we used the `_name` property instead of `name` in the constructor. This is because the getter and setter use the property name `name`, so if we also used the same name in the constructor, we would have a name conflict.\n\nAnother useful feature of getters and setters is that they can be used to compute properties on the fly. Here's an example:\n\n```javascript\nclass Circle {\n  constructor(radius) {\n    this._radius = radius;\n  }\n\n  // Getter\n  get diameter() {\n    return this._radius * 2;\n  }\n\n  // Setter\n  set diameter(newDiameter) {\n    this._radius = newDiameter / 2;\n  }\n}\n\nlet circle = new Circle(5);\n\nconsole.log(circle.radius); // Output: 5\nconsole.log(circle.diameter); // Output: 10\n\ncircle.diameter = 14;\nconsole.log(circle.radius); // Output: 7\nconsole.log(circle.diameter); // Output: 14\n```\n\nIn the above example, we created a `Circle` class with a `radius` property. We also defined a getter and a setter for the `diameter` property. The getter computes the diameter based on the value of `radius`, while the setter sets the value of `radius` based on the new diameter.\n\nTo access the `diameter` property, we again use the dot notation (`circle.diameter`). When we want to set a new value for the `diameter` property, we use the setter (`circle.diameter = 14`).", "Class_Inheritance": "In JavaScript (ECMAScript 2021), we can use the concept of inheritance to create a class that inherits properties and methods from another class. This is done through the use of the `extends` keyword. Here's the syntax for creating a derived class that inherits from a base class:\n\n```\nclass BaseClass {\n  constructor() {\n    this.baseProperty = 'Base class property';\n  }\n\n  baseMethod() {\n    console.log('This is a base class method.');\n  }\n}\n\nclass DerivedClass extends BaseClass {\n  constructor() {\n    super();\n    this.derivedProperty = 'Derived class property';\n  }\n\n  derivedMethod() {\n    console.log('This is a derived class method.');\n  }\n}\n```\n\nIn this example, `DerivedClass` is derived from `BaseClass`. The `extends` keyword is used to specify the base class that `DerivedClass` is derived from. `super()` is used in the derived class constructor to call the constructor of the base class. This allows us to inherit properties from the base class.\n\nLet's take a look at an example of how this works:\n\n```\nconst instance = new DerivedClass();\nconsole.log(instance.baseProperty);  // Output: \"Base class property\"\nconsole.log(instance.derivedProperty);  // Output: \"Derived class property\"\ninstance.baseMethod();  // Output: \"This is a base class method.\"\ninstance.derivedMethod();  // Output: \"This is a derived class method.\"\n```\n\nAs you can see, we can access properties and methods from both the base class and derived class using an instance of the derived class.\n\nIn conclusion, inheritance is a powerful concept in object-oriented programming that allows us to reuse code and create classes that are related to each other. In JavaScript (ECMAScript 2021), we can use the `extends` keyword to create derived classes that inherit from base classes.", "Class_Mixin": "Mixins in JavaScript are a way to reuse and share code between objects without using inheritance. Mixins allow you to add behaviors and properties to an object without changing its original structure. In ECMAScript 2021, there was no specific language feature introduced for Mixins. However, you can still use the concept of Mixins in JavaScript with the help of object composition and spread syntax.\n\nHere's an example of creating a Mixin:\n\n```\nconst CarMixin = {\n  drive() {\n    console.log(\"Driving...\");\n  },\n  stop() {\n    console.log(\"Stopped.\");\n  }\n}\n```\n\nIn the above example, we have created a CarMixin object with two methods, drive() and stop(). These methods can be used by any object that needs them.\n\nNow, let's create an object and use the CarMixin:\n\n```\nconst Car = {\n  make: \"Toyota\",\n  model: \"Corolla\"\n};\n\nObject.assign(Car, CarMixin);\n\nCar.drive(); // Output: \"Driving...\"\nCar.stop(); // Output: \"Stopped.\"\n```\n\nIn the above example, we have used the spread syntax to add the CarMixin object to the Car object. We can now call the drive() and stop() methods on the Car object.\n\nYou can also create a Class and use Mixins in it:\n\n```\nclass Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n}\n\nconst CarMixin = {\n  drive() {\n    console.log(\"Driving...\");\n  },\n  stop() {\n    console.log(\"Stopped.\");\n  }\n}\n\nObject.assign(Car.prototype, CarMixin);\n\nconst myCar = new Car(\"Toyota\", \"Corolla\");\nmyCar.drive(); // Output: \"Driving...\"\nmyCar.stop(); // Output: \"Stopped.\"\n```\n\nIn the above example, we have created a Car class and added the CarMixin to its prototype. We can now call the drive() and stop() methods on the myCar instance of the Car class.\n\nIn conclusion, Mixins in JavaScript are a useful way to share code between objects and avoid class hierarchy. In ECMAScript 2021, there is no specific language feature for Mixins, but we can still use the concept of Mixins with the help of object composition and spread syntax.", "Class_Has_method_": "In JavaScript, there are a few ways to check if a class has a method depending on your specific needs. I'll explain three ways to do so below.\n\n1. Using the `hasOwnProperty()` method:\n\nThe `hasOwnProperty()` method checks if a specific property exists in an object. Classes are just special types of objects, so we can use this method to check if a class has a certain method. \n\nExample:\n\n```\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name}.`);\n  }\n}\n\nconst john = new Person('John');\n\nconsole.log(john.hasOwnProperty('sayHello')); // Output: true\nconsole.log(john.hasOwnProperty('nonExistentMethod')); // Output: false\n```\n\nIn the example above, we create a class `Person` with a `sayHello()` method. We then create an instance of the class `john` and use the `hasOwnProperty()` method to check if the class has a `sayHello()` method. The method returns `true` because the class does indeed have a `sayHello()` method.\n\n2. Using the `in` operator:\n\nThe `in` operator checks if a property exists in an object or its prototype chain. We can use this operator to check if a method exists in a class.\n\nExample:\n\n```\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name}.`);\n  }\n}\n\nconst john = new Person('John');\n\nconsole.log('sayHello' in john); // Output: true\nconsole.log('nonExistentMethod' in john); // Output: false\n```\n\nIn this example, we use the `in` operator to check if `john` has a `sayHello()` method. The operator returns `true` because the class does indeed have a `sayHello()` method.\n\n3. Using the `typeof` operator:\n\nWe can also use the `typeof` operator to check if a class has a specific method. This method is useful if you want to know the type of a given method.\n\nExample:\n\n```\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name}.`);\n  }\n}\n\nconst john = new Person('John');\n\nconsole.log(typeof john.sayHello === 'function'); // Output: true\nconsole.log(typeof john.nonExistentMethod === 'function'); // Output: false\n```\n\nIn this example, we use the `typeof` operator to check if `john` has a `sayHello()` method. The operator returns `true` because `sayHello()` is a function. We also use the operator to check for a non-existent method `nonExistentMethod`, and it returns `false`.\n\nOverall, there are multiple ways to check if a class has a method in JavaScript. Depending on your specific needs, you can choose to use the `hasOwnProperty()` method, the `in` operator, or the `typeof` operator, or even a combination of these methods.", "Other_Comment": "In JavaScript, there are two ways to comment code: single-line comments and multi-line comments.\n\nSingle-Line Comments:\nSingle-line comments begin with two forward slashes (//) and extend to the end of the line. They are used to add comments or notes about a particular line of code.\n\nExample:\n\n```\nlet greeting = \"Hello, world!\"; // This line sets the greeting variable to \"Hello, world!\"\n```\n\nMulti-Line Comments:\nMulti-line comments begin with a slash and an asterisk (/*) and end with an asterisk and a slash (*/). They are used to comment out multiple lines of code or to add detailed explanations about a particular segment of code.\n\nExample:\n\n```\n/*\nThis code section calculates the sum of two numbers \nand stores the result in the variable 'sum'.\n*/\n\nlet num1 = 5;\nlet num2 = 10;\nlet sum = num1 + num2; // The sum of num1 and num2 is stored in the 'sum' variable.\n```", "Other_Assign_value_if_not_exist": "In JavaScript, you can check if a value exists or not using different methods like `if else`, `switch`, `ternary operator`, etc. Once you have determined that the value does not exist, you can assign a default value to avoid errors while performing any operations on that value.\n\nIn ECMAScript 2021, you can use the `??` nullish coalescing operator to assign a default value when the value is nullish (either null or undefined). Here is an example:\n\n```\nlet value;\n\nvalue = value ?? 'default value';\n\nconsole.log(value); // Output: default value\n```\n\nIn the above example, we have defined a variable `value` that does not have any assigned value. Next, we have used the nullish coalescing operator to assign a default value `default value` to the `value` variable if it is nullish. The output will be `default value` as there was no previously assigned value to the variable.\n\nAnother example code:\n\n```\nlet value = null;\n\nvalue = value ?? 'default value';\n\nconsole.log(value); // Output: default value\n```\n\nThis code assigns a default value to `value` when it is nullish. Using the `??` operator avoids errors when trying to perform operations on nullish values.", "Other_Import_another_file": "In JavaScript, you can import other files using the `import` statement. This allows you to use code defined in other files without having to rewrite it in your current file. Here is an example:\n\nModule File (example.js):\n\n```javascript\nexport const message = \"Hello, world!\";\n```\n\nMain File:\n\n```javascript\nimport { message } from './example.js';\n\nconsole.log(message);  // Output: \"Hello, world!\"\n```\n\nIn the above example, we create a module in the `example.js` file that exports a constant called `message`. In the main file, we use the `import` statement to import the `message` constant from the `example.js` file. We can then use the `message` constant in the main file.\n\nYou can also create a default export in the module file that can be imported without specifying a name. Here is an example:\n\nModule File:\n\n```javascript\nexport default function greet(name) {\n  console.log(`Hello, ${name}!`);\n}\n```\n\nMain File:\n\n```javascript\nimport sayHello from './example.js';\n\nsayHello('Jane');  // Output: \"Hello, Jane!\"\n```\n\nIn the above example, we create a default export in the `example.js` file by exporting a function. In the main file, we use `import` to import the function as `sayHello`. We can then call the `sayHello` function with a name argument to print a greeting to the console.", "Other_Destructuring_assignment": "Destructuring assignment is a feature in JavaScript that allows you to unpack values from an array, or properties from an object, into distinct variables. This can be helpful when writing code that needs to access a small subset of values from a larger data structure. Here is an example of using destructuring assignment to extract values from an array:\n\n```javascript\nconst myArray = [1, 2, 3, 4, 5];\n\nconst [first, second, , fourth] = myArray;\n\nconsole.log(first);    // Output: 1\nconsole.log(second);   // Output: 2\nconsole.log(fourth);   // Output: 4\n```\n\nIn this example, we use array destructuring to extract the first, second, and fourth elements of `myArray`. We leave the third element empty by including a comma with no variable name.\n\nHere is an example of using destructuring assignment to extract properties from an object:\n\n```javascript\nconst myObj = {\n  name: 'John',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'Anytown',\n    state: 'CA',\n    zip: '12345'\n  }\n};\n\nconst { name, age, address: { city } } = myObj;\n\nconsole.log(name);   // Output: John\nconsole.log(age);    // Output: 30\nconsole.log(city);   // Output: Anytown\n```\n\nIn this example, we use object destructuring to extract the `name`, `age`, and `city` properties from `myObj`. We also use destructuring to extract the nested `address` property and assign it to a variable named `address`. \n\nIn both cases, you can also provide default values for variables in case the corresponding value in the array or object is undefined:\n\n```javascript\nconst myArray = [1, 2];\n\nconst [first, second, third = 3] = myArray;\n\nconsole.log(third);   // Output: 3\n```\n\nIn this case, because `myArray` only has two elements, the value of `third` is set to the default value of 3 since there is no third value in the array.", "Other_Date": "Working with dates in JavaScript can be done using the Date object. The Date object is built into the JavaScript language, and it can be used to work with dates and times by creating instances of the object.\n\nHere are some examples of how you can use the Date object in JavaScript:\n\n1. Creating a new date object:\n\n```\nconst date = new Date();\n```\n\nBy default, `new Date()` will create a new date object for the current date and time.\n\n2. Setting a specific date:\n\n```\nconst date = new Date('October 12, 2021');\n```\n\nThis creates a new date object with the date set to October 12, 2021.\n\n3. Getting the current date and time:\n\n```\nconst date = new Date();\nconst currentYear = date.getFullYear();\nconst currentMonth = date.getMonth() + 1;\nconst currentDate = date.getDate();\nconst currentHour = date.getHours();\nconst currentMinute = date.getMinutes();\nconst currentSecond = date.getSeconds();\n```\n\nThis creates a new date object for the current date and time, and then extracts the current year, month, day, hour, minute, and second.\n\n4. Formatting dates:\n\n```\nconst date = new Date('October 12, 2021');\nconst formattedDate = date.toLocaleDateString('en-US', {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'});\n```\n\nThis formats the date as \"Tuesday, October 12, 2021\". You can customize the formatting by changing the options object passed to `toLocaleDateString()`.\n\n5. Performing date arithmetic:\n\n```\nconst date1 = new Date('October 12, 2021');\nconst date2 = new Date('October 14, 2021');\nconst millisecondsBetween = date2 - date1;\nconst daysBetween = Math.ceil(millisecondsBetween / (1000 * 60 * 60 * 24));\n```\n\nThis calculates the difference in days between two dates (in this case, October 12, 2021 and October 14, 2021).\n\nNote: ECMAScript 2021 does not introduce any new features related to dates, so these examples apply to all versions of JavaScript.", "Other_Time": "In JavaScript - ECMAScript 2021, time can be manipulated and retrieved using the built-in `Date` object. \n\nHere are some examples of how to use time in JavaScript - ECMAScript 2021:\n\n**1. Creating a new date object:**\n\nYou can create a new date object in JavaScript using the `Date()` constructor. If no arguments are passed, it gives the current date and time.\n\n```javascript\nconst currentDate = new Date();\nconsole.log(currentDate);\n```\n\nOutput:\n\n```\nSat Oct 16 2021 16:08:26 GMT+0530 (India Standard Time)\n```\n\n**2. Formatting date:**\n\nThe `Date` object has various methods to get different parts of the date and time, such as `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()`, and `getMilliseconds()`.\n\n```javascript\nconst currentDate = new Date();\nconsole.log(currentDate.getFullYear()); // 2021\nconsole.log(currentDate.getMonth()); // 9 (October, zero-based index)\nconsole.log(currentDate.getDate()); // 16\nconsole.log(currentDate.getHours()); // 16\nconsole.log(currentDate.getMinutes()); // 13\nconsole.log(currentDate.getSeconds()); // 54\nconsole.log(currentDate.getMilliseconds()); // 907\n```\n\n**3. Parsing date and time:**\n\nYou can also parse a date and time string and create a `Date` object using the `Date.parse()` method.\n\n```javascript\nconst timestamp = Date.parse(\"2021-10-16T16:30:00\");\nconsole.log(new Date(timestamp));\n```\n\nOutput:\n\n```\nSat Oct 16 2021 16:30:00 GMT+0530 (India Standard Time)\n```\n\n**4. Timezone manipulation**\n\nYou can also get the timezone offset of the user's computer using the `getTimezoneOffset()` method of the `Date` object. This method returns the difference between UTC and the local time zone, in minutes.\n\n```javascript\nconst currentDate = new Date();\nconsole.log(currentDate.getTimezoneOffset()); // -330 (India Standard Time)\n```\n\n**5. Time differences**\n\nYou can calculate the difference between two dates in JavaScript using the `getTime()` method. This method returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n```javascript\nconst date1 = new Date(\"2021-10-16T16:00:00\");\nconst date2 = new Date(\"2021-10-16T16:30:00\");\nconst difference = date2.getTime() - date1.getTime(); // returns difference in milliseconds\nconsole.log(difference / 60000); // 30 (divide by 60000 to get difference in minutes)\n```\n\nThese are some of the examples of how to use time in JavaScript - ECMAScript 2021.", "Other_Not": "In JavaScript, `not` is an operator that can be used to negate a boolean value, meaning it will invert true to false or false to true. \n\nThe syntax for using the `not` operator is to place an exclamation point before the expression you want to negate. \n\nHere are a few examples:\n\n1. Negating a boolean value:\n\n```javascript\nlet a = true;\nlet b = !a; // b is now false\n```\n\n2. Checking if a variable is not equal to a certain value:\n\n```javascript\nlet age = 18;\nif (age !== 21) {\n  console.log(\"You are not old enough to drink\");\n}\n// Output: You are not old enough to drink\n```\n\n3. Evaluating if a value is not truthy:\n\nIn JavaScript, the values `null`, `undefined`, `0`, `false`, `NaN`, and `''`(empty string) are considered falsey.\n\n```javascript\nlet value = null;\nif (!value) {\n  console.log(\"The value is not truthy\");\n}\n// Output: The value is not truthy\n```\n\nBy using the `not` operator, you can easily flip boolean values, check for inequality, and check for falsey values.", "Other_Assign_this_or_that": "In JavaScript - ECMAScript 2021, the `this` keyword is used to refer to the current object, whereas the `that` keyword is not a reserved keyword in JavaScript. However, you can still use other variables or object references to assign a value to `that`. \n\nHere's an example of how to use `this` keyword in a method of an object:\n\n```\nconst person = {\n  name: \"John\",\n  age: 30,\n  getDetails: function() {\n    console.log(`Name: ${this.name}, Age: ${this.age}`);\n  }\n};\nperson.getDetails(); // outputs \"Name: John, Age: 30\"\n```\n\nIn the above example, the `getDetails` method uses `this` to refer to the `person` object, which is the current object.\n\nHere's an example of how to assign a value to `that` using a variable:\n\n```\nconst obj = {\n  a: 1,\n  b: 2,\n  c: function() {\n    const that = this;\n    console.log(that.a + that.b);\n  }\n};\nobj.c(); // outputs 3\n```\n\nIn the above example, the `c` method assigns the value of `this` to a variable called `that`. The `c` method then uses `that` to refer to the current object and perform a calculation.\n\nAlternatively, you could also assign `that` using a reference to the current object:\n\n```\nconst obj = {\n  a: 1,\n  b: 2,\n  c: function() {\n    const that = obj;\n    console.log(that.a + that.b);\n  }\n};\nobj.c(); // outputs 3\n```\n\nIn this example, the `c` method assigns the value of `obj` to the `that` variable, which refers to the current object. \n\nNote that assigning a reference to `this` directly to `that` may not work as intended, since `this` may change depending on how the function is called. Therefore, it's recommended to assign a reference to the current object instead.", "Other_Run_command": "In ECMAScript 2021, there are a variety of ways to run commands in JavaScript. Here are a few examples:\n\n1. Using console.log() to print a message to the console:\n```\nconsole.log(\"Hello, world!\");\n```\nThis will output the message \"Hello, world!\" to the console.\n\n2. Using the alert() function to display a message in a pop-up window:\n```\nalert(\"Hello, world!\");\n```\nThis will display a pop-up window with the message \"Hello, world!\".\n\n3. Using a function to execute a set of commands:\n```\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\n\ngreet(\"John\");\n```\nThis will print the message \"Hello, John!\" to the console.\n\n4. Using an event listener to execute a function when an event occurs:\n```\ndocument.addEventListener(\"click\", function() {\n  console.log(\"You clicked the page!\");\n});\n```\nThis will listen for a click on the page and execute the function, which will log the message \"You clicked the page!\" to the console.", "Importing_Libraries_import": "In ECMAScript 2021, libraries can be imported using the `import` statement. The syntax for import statement is:\n\n```\nimport defaultExport from \"module-name\";\nimport * as name from \"module-name\";\nimport { export1 } from \"module-name\";\nimport { export1 as alias1 } from \"module-name\";\nimport { export1 , export2 } from \"module-name\";\nimport { export1 , export2 as alias2 , [...] } from \"module-name\";\nimport defaultExport, { export1 [ , [...] ] } from \"module-name\";\nimport defaultExport, * as name from \"module-name\";\n```\n\nHere's an example of importing a library that exports a default function:\n\n```javascript\nimport myFunction from './my-library.js';\n\nmyFunction();  // call the default function exported by the module\n```\n\nHere's an example of importing a library that exports multiple named functions:\n\n```javascript\nimport { myFunction1, myFunction2 } from './my-library.js';\n\nmyFunction1();  // call the first named function exported by the module \nmyFunction2();  // call the second named function exported by the module \n```\n\nIn addition, here's an example of importing a library using a wildcard to import all exported functions:\n\n```javascript\nimport * as myLibrary from './my-library.js';\n\nmyLibrary.myFunction1();  // call the first named function exported by the module\nmyLibrary.myFunction2();  // call the second named function exported by the module \n```"}